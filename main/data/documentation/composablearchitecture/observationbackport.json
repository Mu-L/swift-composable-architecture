{"primaryContentSections":[{"content":[{"text":"Overview","level":2,"anchor":"Overview","type":"heading"},{"inlineContent":[{"text":"With version 1.7 of the Composable Architecture we have introduced support for Swift 5.9‚Äôs","type":"text"},{"text":" ","type":"text"},{"text":"observation tools, ","type":"text"},{"inlineContent":[{"type":"text","text":"and"}],"type":"emphasis"},{"text":" we have backported those tools to work in iOS 13 and later. Using the","type":"text"},{"text":" ","type":"text"},{"text":"observation tools in pre-iOS 17 does require a few additional steps and there are some gotchas to be","type":"text"},{"text":" ","type":"text"},{"text":"aware of.","type":"text"}],"type":"paragraph"},{"text":"The Perception framework","level":2,"anchor":"The-Perception-framework","type":"heading"},{"inlineContent":[{"text":"The Composable Architecture comes with a framework known as Perception, which is our backport of","type":"text"},{"text":" ","type":"text"},{"text":"Swift 5.9‚Äôs Observation to iOS 13, macOS 12, tvOS 13 and watchOS 6. For all of the tools in the","type":"text"},{"text":" ","type":"text"},{"text":"Observation framework there is a corresponding tool in Perception.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, instead of the "},{"type":"codeVoice","code":"@Observable"},{"type":"text","text":" macro, there is the "},{"type":"codeVoice","code":"@Perceptible"},{"type":"text","text":" macro:"}],"type":"paragraph"},{"code":["@Perceptible","class CounterModel {","  var count = 0","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"However, in order for a view to properly observe changes to a ‚Äúperceptible‚Äù model, you must"},{"type":"text","text":" "},{"type":"text","text":"remember to wrap the contents of your view in the "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"type":"text","text":" view:"}],"type":"paragraph"},{"code":["struct CounterView: View {","  let model = CounterModel()","","  var body: some View {","    WithPerceptionTracking {","      Form {","        Text(self.model.count.description)","        Button(\"Decrement\") { self.model.count -= 1 }","        Button(\"Increment\") { self.model.count += 1 }","      }","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"This will make sure that the view subscribes to any fields accessed in the "},{"type":"codeVoice","code":"@Perceptible"},{"type":"text","text":" model so"},{"type":"text","text":" "},{"type":"text","text":"that changes to those fields invalidate the view and cause it to re-render."}],"type":"paragraph"},{"inlineContent":[{"text":"If a field of a ","type":"text"},{"code":"@Perceptible","type":"codeVoice"},{"text":" model is accessed in a view while ","type":"text"},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"text":" inside","type":"text"},{"text":" ","type":"text"},{"code":"WithPerceptionTracking","type":"codeVoice"},{"text":", then a runtime warning will be triggered:","type":"text"}],"type":"paragraph"},{"name":"üü£ Runtime Warning","type":"aside","content":[{"inlineContent":[{"text":"Perceptible state was accessed but is not being tracked. Track changes to","type":"text"},{"text":" ","type":"text"},{"text":"state by wrapping your view in a ‚ÄòWithPerceptionTracking‚Äô view.","type":"text"}],"type":"paragraph"}],"style":"note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To debug this, expand the warning in the Issue Navigator of Xcode (‚åò5), and click through the stack"},{"type":"text","text":" "},{"type":"text","text":"frames displayed to find the line in your view where you are accessing state without being inside"},{"type":"text","text":" "},{"code":"WithPerceptionTracking","type":"codeVoice"},{"type":"text","text":"."}]},{"level":2,"type":"heading","text":"Bindings","anchor":"Bindings"},{"type":"paragraph","inlineContent":[{"text":"If you want to derive bindings from the store (see ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings"},{"text":" for more information), then you","type":"text"},{"text":" ","type":"text"},{"text":"would typically use the ","type":"text"},{"code":"@Bindable","type":"codeVoice"},{"text":" property wrapper that comes with SwiftUI:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct MyView: View {","  @Bindable var store: StoreOf<MyFeature>","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"text":"However, ","type":"text"},{"type":"codeVoice","code":"@Bindable"},{"text":" is iOS 17+. So, the Perception library comes with a tool that can be used in","type":"text"},{"text":" ","type":"text"},{"text":"its place until you can target iOS 17 and later. You just have to qualify ","type":"text"},{"type":"codeVoice","code":"@Bindable"},{"text":" with the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Perception"},{"text":" namespace:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct MyView: View {","  @Perception.Bindable var store: StoreOf<MyFeature>","  \/\/ ...","}"]},{"level":2,"type":"heading","text":"Gotchas","anchor":"Gotchas"},{"type":"paragraph","inlineContent":[{"text":"There are a few gotchas to be aware of when using ","type":"text"},{"code":"WithPerceptionTracking","type":"codeVoice"},{"text":".","type":"text"}]},{"level":3,"type":"heading","text":"Lazy view closures","anchor":"Lazy-view-closures"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are many ‚Äúlazy‚Äù closures in SwiftUI that evaluate only when something happens in the view, and"},{"type":"text","text":" "},{"type":"text","text":"not necessarily in the same stack frames as the "},{"code":"body","type":"codeVoice"},{"type":"text","text":" of the view. For example, the trailing"},{"type":"text","text":" "},{"type":"text","text":"closure of "},{"code":"ForEach","type":"codeVoice"},{"type":"text","text":" is called "},{"inlineContent":[{"type":"text","text":"after"}],"type":"emphasis"},{"type":"text","text":" the "},{"code":"body","type":"codeVoice"},{"type":"text","text":" of the view has been computed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This means that even if you wrap the body of the view in "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"type":"text","text":":"}]},{"code":["WithPerceptionTracking {","  ForEach(store.scope(state: \\.rows, action: \\.rows), id: \\.state.id) { store in","    Text(store.title)","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"‚Ä¶the access to the row‚Äôs ","type":"text"},{"code":"store.title","type":"codeVoice"},{"text":" happens ","type":"text"},{"inlineContent":[{"type":"text","text":"outside"}],"type":"emphasis"},{"text":" ","type":"text"},{"code":"WithPerceptionTracking","type":"codeVoice"},{"text":", and hence will","type":"text"},{"text":" ","type":"text"},{"text":"not work and will trigger a runtime warning as described above.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The fix for this is to wrap the content of the trailing closure in another "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"type":"text","text":":"}]},{"code":["WithPerceptionTracking {","  ForEach(store.scope(state: \\.rows, action: \\.rows), id: \\.state.id) { store in","    WithPerceptionTracking {","      Text(store.title)","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"heading","anchor":"Mixing-legacy-and-modern-features-together","text":"Mixing legacy and modern features together","level":3},{"type":"paragraph","inlineContent":[{"text":"Some problems can arise when mixing together features built in the ‚Äúlegacy‚Äù style, using","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"text":" and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"text":", and features built in the ‚Äúmodern‚Äù style, using the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()"},{"text":" macro. The problems mostly manifest themselves as re-computing view bodies","type":"text"},{"text":" ","type":"text"},{"text":"more often than necessary, but that can also put strain on SwiftUI‚Äôs ability to figure out what","type":"text"},{"text":" ","type":"text"},{"text":"state changed, and can cause glitches or exacerbate navigation bugs.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"See ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7#Incrementally-migrating","isActive":true},{"type":"text","text":" for more information about this."}]}],"kind":"content"}],"abstract":[{"text":"Learn how the Observation framework from Swift 5.9 was backported to support iOS 16 and earlier,","type":"text"},{"text":" ","type":"text"},{"text":"as well as the caveats of using the backported tools.","type":"text"}],"kind":"article","hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"metadata":{"modules":[{"name":"ComposableArchitecture"}],"role":"article","roleHeading":"Article","title":"Observation backport"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/observationbackport"]}],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"],"anchor":"Integrations","title":"Integrations"}],"sections":[],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservableState()":{"abstract":[{"text":"Defines and implements conformance of the Observable protocol.","type":"text"}],"kind":"symbol","title":"ObservableState()","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ObservableState","kind":"identifier"},{"text":"()","kind":"text"}],"url":"\/documentation\/composablearchitecture\/observablestate()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Bindings":{"abstract":[{"text":"Learn how to connect features written in the Composable Architecture to SwiftUI bindings.","type":"text"}],"role":"article","title":"Working with SwiftUI bindings","type":"topic","url":"\/documentation\/composablearchitecture\/bindings","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.7#Incrementally-migrating":{"abstract":[],"title":"Incrementally migrating","kind":"section","url":"\/documentation\/composablearchitecture\/migratingto1.7#Incrementally-migrating","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7#Incrementally-migrating","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIKit":{"role":"collectionGroup","title":"UIKit Integration","type":"topic","url":"\/documentation\/composablearchitecture\/uikit","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit","kind":"article","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a UIKit application."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"kind":"symbol","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ViewStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/viewstore","title":"ViewStore","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"ViewStore"},{"text":" is an object that can observe state changes and send actions. They are most","type":"text"},{"text":" ","type":"text"},{"text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used","type":"text"},{"text":" ","type":"text"},{"text":"anywhere it makes sense to observe state or send actions.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"ViewStore","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","deprecated":true},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"navigatorTitle":[{"text":"WithViewStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/withviewstore","title":"WithViewStore","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WithViewStore","kind":"identifier"}],"kind":"symbol","type":"topic","deprecated":true,"abstract":[{"text":"A view helper that transforms a ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"text":" into a ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"text":" so that its state can be observed","type":"text"},{"text":" ","type":"text"},{"text":"by a view builder.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"url":"\/documentation\/composablearchitecture\/swiftuiintegration","type":"topic","role":"collectionGroup","title":"SwiftUI Integration","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a SwiftUI application."}],"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","type":"topic","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"kind":"symbol","url":"\/documentation\/composablearchitecture","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"url":"\/documentation\/composablearchitecture\/store","type":"topic","abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"text":" ","type":"text"},{"text":"around to views that need to interact with the application.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}],"title":"Store","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"Store","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftConcurrency":{"kind":"article","title":"Adopting Swift concurrency","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","abstract":[{"text":"Learn how to write safe, concurrent effects using Swift‚Äôs structured concurrency.","type":"text"}],"url":"\/documentation\/composablearchitecture\/swiftconcurrency","role":"article"}}}