{"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"]]},"sections":[],"abstract":[{"text":"A publisher that emits when state changes.","type":"text"}],"deprecationSummary":[{"inlineContent":[{"type":"text","text":"Use '@ObservableState', instead. See the following migration guide for more information: https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/migratingto1.7#Using-ObservableState"}],"type":"paragraph"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"attribute","text":"@"},{"kind":"attribute","text":"MainActor","preciseIdentifier":"s:ScM"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"publisher"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StorePublisher","preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StorePublisher"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":"> { "},{"kind":"keyword","text":"get"},{"kind":"text","text":" }"}],"languages":["swift"],"platforms":["macOS"]}]},{"content":[{"level":2,"text":"Discussion","type":"heading","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This publisher supports dynamic member lookup so that you can pluck out a specific field in"},{"type":"text","text":" "},{"type":"text","text":"the state:"}]},{"type":"codeListing","code":["viewStore.publisher.alert","  .sink { ... }"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"When the emission happens the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","type":"reference"},{"text":"’s state has been updated, and so the following","type":"text"},{"text":" ","type":"text"},{"text":"precondition will pass:","type":"text"}]},{"type":"codeListing","code":["viewStore.publisher","  .sink { precondition($0 == viewStore.state) }"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This means you can either use the value passed to the closure or you can reach into"},{"type":"text","text":" "},{"type":"codeVoice","code":"viewStore.state"},{"type":"text","text":" directly."}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Due to a bug in Combine (or feature?), the order you ","type":"text"},{"code":".sink","type":"codeVoice"},{"text":" on a publisher has no","type":"text"},{"text":" ","type":"text"},{"text":"bearing on the order the ","type":"text"},{"code":".sink","type":"codeVoice"},{"text":" closures are called. This means the work performed inside","type":"text"},{"text":" ","type":"text"},{"code":"viewStore.publisher.sink","type":"codeVoice"},{"text":" closures should be completely independent of each other. Later","type":"text"},{"text":" ","type":"text"},{"text":"closures cannot assume that earlier ones have already run.","type":"text"}]}],"type":"aside","style":"note","name":"Note"}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/publisher"},"kind":"symbol","metadata":{"roleHeading":"Instance Property","modules":[{"name":"ComposableArchitecture"}],"platforms":[],"symbolKind":"property","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"publisher","kind":"identifier"},{"text":": ","kind":"text"},{"text":"StorePublisher","preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"ViewState","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"publisher","externalID":"s:22ComposableArchitecture9ViewStoreC9publisherAA0D9PublisherVyxGvp","role":"symbol"},"seeAlsoSections":[{"generated":true,"title":"Combine integration","anchor":"Combine-integration","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ifLet(then:else:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/publisher"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/viewstore\/publisher"]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/publisher":{"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"publisher","kind":"identifier"},{"text":": ","kind":"text"},{"text":"StorePublisher","preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":">","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/publisher","title":"publisher","url":"\/documentation\/composablearchitecture\/store\/publisher","abstract":[{"type":"text","text":"A publisher that emits when state changes."}],"kind":"symbol","type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","type":"topic","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"kind":"symbol","url":"\/documentation\/composablearchitecture","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"kind":"symbol","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ViewStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/viewstore","title":"ViewStore","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"ViewStore"},{"text":" is an object that can observe state changes and send actions. They are most","type":"text"},{"text":" ","type":"text"},{"text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used","type":"text"},{"text":" ","type":"text"},{"text":"anywhere it makes sense to observe state or send actions.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"ViewStore","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","deprecated":true},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/publisher":{"role":"symbol","type":"topic","title":"publisher","deprecated":true,"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"publisher"},{"kind":"text","text":": "},{"preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV","kind":"typeIdentifier","text":"StorePublisher"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":">"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/publisher","url":"\/documentation\/composablearchitecture\/viewstore\/publisher","abstract":[{"type":"text","text":"A publisher that emits when state changes."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StorePublisher":{"abstract":[{"type":"text","text":"A publisher of store state."}],"role":"symbol","navigatorTitle":[{"text":"StorePublisher","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StorePublisher","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StorePublisher","type":"topic","title":"StorePublisher","kind":"symbol","url":"\/documentation\/composablearchitecture\/storepublisher"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/ifLet(then:else:)":{"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ifLet","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Wrapped","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"then","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Wrapped","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":", ","kind":"text"},{"text":"else","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":") -> any ","kind":"text"},{"text":"Cancellable","kind":"typeIdentifier","preciseIdentifier":"s:7Combine11CancellableP"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ifLet(then:else:)","url":"\/documentation\/composablearchitecture\/store\/iflet(then:else:)","deprecated":true,"kind":"symbol","abstract":[{"type":"text","text":"Calls one of two closures depending on whether a store’s optional state is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" or not, and"},{"type":"text","text":" "},{"type":"text","text":"whenever this condition changes for as long as the cancellable lives."}],"title":"ifLet(then:else:)","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIKit":{"role":"collectionGroup","title":"UIKit Integration","type":"topic","url":"\/documentation\/composablearchitecture\/uikit","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit","kind":"article","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a UIKit application."}]}}}