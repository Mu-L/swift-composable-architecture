{"metadata":{"role":"article","title":"Migrating to 1.11","roleHeading":"Article","modules":[{"name":"ComposableArchitecture"}]},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.19","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.18","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17.1","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.16","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4"]}],"kind":"article","sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","interfaceLanguage":"swift"},"abstract":[{"text":"Update your code to use the new ","type":"text"},{"code":"withLock","type":"codeVoice"},{"text":" method for mutating shared state from asynchronous","type":"text"},{"text":" ","type":"text"},{"text":"contexts, rather than mutating the underlying wrapped value directly.","type":"text"}],"variants":[{"paths":["\/documentation\/composablearchitecture\/migratingto1.11"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"content":[{"anchor":"Overview","type":"heading","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Composable Architecture is under constant development, and we are always looking for ways to"},{"type":"text","text":" "},{"type":"text","text":"simplify the library, and make it more powerful. This version of the library introduced 2 new"},{"type":"text","text":" "},{"type":"text","text":"APIs and deprecated 1 API."}]},{"name":"Important","type":"aside","style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Before following this migration guide be sure you have fully migrated to the newest"},{"type":"text","text":" "},{"type":"text","text":"tools of version 1.10. See "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides","isActive":true},{"type":"text","text":" for more information."}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#Mutating-shared-state-concurrently","isActive":true}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"#Supplying-mock-read-only-state-to-previews","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Migrating-to-1112","isActive":true,"type":"reference"}]}]}]},{"anchor":"Mutating-shared-state-concurrently","type":"heading","text":"Mutating shared state concurrently","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Version 1.10 of the Composable Architecture introduced a powerful tool for"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState","overridingTitleInlineContent":[{"type":"text","text":"sharing state"}],"type":"reference","isActive":true,"overridingTitle":"sharing state"},{"type":"text","text":" amongst your features. And you can mutate a piece of shared"},{"type":"text","text":" "},{"type":"text","text":"state directly, as if it were just a normal property on a value type:"}]},{"type":"codeListing","syntax":"swift","code":["case .incrementButtonTapped:","  state.count += 1","  return .none"]},{"type":"paragraph","inlineContent":[{"text":"And if you only ever mutate shared state from a reducer, then this is completely fine to do.","type":"text"},{"text":" ","type":"text"},{"text":"However, because shared values are secretly references (that is how data is shared), it is possible","type":"text"},{"text":" ","type":"text"},{"text":"to mutate shared values from effects, which means concurrently. And prior to 1.11, it was possible","type":"text"},{"text":" ","type":"text"},{"text":"to do this directly:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["case .delayedIncrementButtonTapped:","  return .run { _ in","    @Shared(.count) var count","    count += 1","  }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now, "},{"type":"codeVoice","code":"Shared"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":", and is technically thread-safe in that it will not crash when writing"},{"type":"text","text":" "},{"type":"text","text":"to it from two different threads. However, allowing direct mutation does make the value susceptible"},{"type":"text","text":" "},{"type":"text","text":"to race conditions. If you were to perform "},{"type":"codeVoice","code":"count += 1"},{"type":"text","text":" from 1,000 threads, it is possible for"},{"type":"text","text":" "},{"type":"text","text":"the final value to not be 1,000."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We wanted the "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" type to be as ergonomic as possible, and that is why we make it directly"},{"type":"text","text":" "},{"type":"text","text":"mutable, but we should not be allowing these mutations to happen from asynchronous contexts. And so"},{"type":"text","text":" "},{"type":"text","text":"now the "},{"type":"codeVoice","code":"wrappedValue"},{"type":"text","text":" setter has been marked unavailable from asynchronous contexts, with"},{"type":"text","text":" "},{"type":"text","text":"a helpful message of how to fix:"}]},{"syntax":"swift","code":["case .delayedIncrementButtonTapped:","  return .run { _ in","    @Shared(.count) var count","    count += 1  \/\/ ⚠️ Use '$shared.withLock' instead of mutating directly.","  }"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"To fix this deprecation you can use the new ","type":"text"},{"code":"withLock","type":"codeVoice"},{"text":" method on the projected value of ","type":"text"},{"code":"@Shared","type":"codeVoice"},{"text":":","type":"text"}]},{"syntax":"swift","code":["case .delayedIncrementButtonTapped:","  return .run { _ in","    @Shared(.count) var count","    $count.withLock { $0 += 1 }","  }"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This locks the entire unit of work of reading the current count, incrementing it, and storing it"},{"type":"text","text":" "},{"type":"text","text":"back in the reference."}]},{"type":"paragraph","inlineContent":[{"text":"Technically it is still possible to write code that has race conditions, such as this silly example:","type":"text"}]},{"syntax":"swift","code":["let currentCount = count","$count.withLock { $0 = currentCount + 1 }"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"But there is no way to 100% prevent race conditions in code. Even actors are susceptible to problems"},{"type":"text","text":" "},{"type":"text","text":"due to re-entrancy. To avoid problems like the above we recommend wrapping as many mutations of the"},{"type":"text","text":" "},{"type":"text","text":"shared state as possible in a single "},{"type":"codeVoice","code":"withLock"},{"type":"text","text":". That will make sure that the full unit of work is"},{"type":"text","text":" "},{"type":"text","text":"guarded by a lock."}]},{"type":"heading","anchor":"Supplying-mock-read-only-state-to-previews","level":2,"text":"Supplying mock read-only state to previews"},{"type":"paragraph","inlineContent":[{"text":"A new ","type":"text"},{"code":"constant","type":"codeVoice"},{"text":" helper on ","type":"text"},{"code":"SharedReader","type":"codeVoice"},{"text":" has been introduced to simplify supplying mock data to","type":"text"},{"text":" ","type":"text"},{"text":"Xcode previews. It works like SwiftUI’s ","type":"text"},{"code":"Binding.constant","type":"codeVoice"},{"text":", but for shared references:","type":"text"}]},{"syntax":"swift","code":["#Preview {","  FeatureView(","    store: Store(","      initialState: Feature.State(count: .constant(42))","    ) {","      Feature()","    }","  )",")"],"type":"codeListing"},{"text":"Migrating to 1.11.2","level":2,"type":"heading","anchor":"Migrating-to-1112"},{"inlineContent":[{"text":"A few bug fixes landed in 1.11.2 that may be source breaking. They are described below:","type":"text"}],"type":"paragraph"},{"text":"`withLock` is now `@MainActor`","level":3,"type":"heading","anchor":"withLock-is-now-MainActor"},{"inlineContent":[{"text":"In ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","isActive":true,"overridingTitle":"version 1.11","overridingTitleInlineContent":[{"text":"version 1.11","type":"text"}],"type":"reference"},{"text":" of the library we deprecated mutating shared state from","type":"text"},{"text":" ","type":"text"},{"text":"asynchronous contexts, such as effects, and instead recommended using the new ","type":"text"},{"type":"codeVoice","code":"withLock"},{"type":"text","text":" method."},{"type":"text","text":" "},{"type":"text","text":"Doing so made it possible to lock all mutations to the shared state and prevent race conditions (see"},{"type":"text","text":" "},{"type":"text","text":"the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","overridingTitle":"migration guide","overridingTitleInlineContent":[{"text":"migration guide","type":"text"}],"type":"reference","isActive":true},{"type":"text","text":" for more info)."}],"type":"paragraph"},{"inlineContent":[{"text":"However, this did leave open the possibility for deadlocks if shared state was read from and written","type":"text"},{"text":" ","type":"text"},{"text":"to on different threads. To fix this we have now restricted ","type":"text"},{"code":"withLock","type":"codeVoice"},{"text":" to the ","type":"text"},{"code":"@MainActor","type":"codeVoice"},{"text":", and so","type":"text"},{"text":" ","type":"text"},{"text":"you will now need to ","type":"text"},{"code":"await","type":"codeVoice"},{"text":" its usage:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"diff","code":["-sharedCount.withLock { $0 += 1 }","+await sharedCount.withLock { $0 += 1 }"]},{"inlineContent":[{"type":"text","text":"The compiler should suggest this fix-it for you."}],"type":"paragraph"},{"text":"Optional dynamic member lookup on `Shared` is deprecated\/disfavored","type":"heading","level":3,"anchor":"Optional-dynamic-member-lookup-on-Shared-is-deprecateddisfavored"},{"inlineContent":[{"text":"When the ","type":"text"},{"code":"@Shared","type":"codeVoice"},{"text":" property wrapper was first introduced, its dynamic member lookup was overloaded","type":"text"},{"text":" ","type":"text"},{"text":"to automatically unwrap optionals for ergonomic purposes:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["if let sharedUnwrappedProperty = $shared.optionalProperty {","  \/\/ ...","}"]},{"inlineContent":[{"type":"text","text":"This unfortunately made dynamic member lookup a little more difficult to understand:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["$shared.optionalProperty  \/\/ Shared<Value>?, *not* Shared<Value?>"]},{"inlineContent":[{"type":"text","text":"…and required casting and other tricks to transform shared values into what one might expect."}],"type":"paragraph"},{"inlineContent":[{"text":"And so this dynamic member lookup is deprecated and has been disfavored, and will eventually be","type":"text"},{"text":" ","type":"text"},{"text":"removed entirely. Instead, you can use ","type":"text"},{"code":"Shared.init(_:)","type":"codeVoice"},{"text":" to explicitly unwrap a shared optional","type":"text"},{"text":" ","type":"text"},{"text":"value.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Disfavoring it does have the consequence of being source breaking in the case of "},{"type":"codeVoice","code":"if let"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"codeVoice","code":"guard let"},{"type":"text","text":" expressions, where Swift does not select the optional overload automatically. To"},{"type":"text","text":" "},{"type":"text","text":"migrate, use "},{"type":"codeVoice","code":"Shared.init(_:)"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","syntax":"diff","code":["-if let sharedUnwrappedProperty = $shared.optionalProperty {","+if let sharedUnwrappedProperty = Shared($shared.optionalProperty) {","   \/\/ ..."," }"]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides"]]},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.10":{"role":"article","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.10","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","title":"Migrating to 1.10","abstract":[{"type":"text","text":"Update your code to make use of the new state sharing tools in the library, such as the "},{"code":"Shared","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"property wrapper, and the "},{"code":"appStorage","type":"codeVoice"},{"type":"text","text":" and "},{"code":"fileStorage","type":"codeVoice"},{"type":"text","text":" persistence strategies."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.7":{"url":"\/documentation\/composablearchitecture\/migratingto1.7","kind":"article","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","type":"topic","abstract":[{"text":"Update your code to make use of the new observation tools in the library and get rid of legacy","type":"text"},{"text":" ","type":"text"},{"text":"APIs such as ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"text":", ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore"},{"text":", ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore"},{"text":", and more.","type":"text"}],"title":"Migrating to 1.7"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","type":"topic","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"kind":"symbol","url":"\/documentation\/composablearchitecture","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.8":{"url":"\/documentation\/composablearchitecture\/migratingto1.8","abstract":[{"text":"Update your code to make use of the new capabilities of the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true,"type":"reference"},{"text":" macro, including automatic","type":"text"},{"text":" ","type":"text"},{"text":"fulfillment of requirements for destination reducers and path reducers.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","kind":"article","title":"Migrating to 1.8","role":"article","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.16":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.16","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.16","type":"topic","abstract":[{"type":"text","text":"The "},{"code":".appStorage","type":"codeVoice"},{"type":"text","text":" strategy used with "},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":" now uses key-value observing instead of"},{"type":"text","text":" "},{"code":"NotificationCenter","type":"codeVoice"},{"type":"text","text":" when possible. Learn how this may affect your code."}],"title":"Migrating to 1.16"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.9":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","type":"topic","abstract":[{"type":"text","text":"Update your code to make use of the new "},{"code":"TestStore\/send(_:assert:fileID:file:line:column:)-8877x","type":"codeVoice"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"method on "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference","isActive":true},{"type":"text","text":" which gives a succinct syntax for sending actions with case key paths, and"},{"type":"text","text":" "},{"type":"text","text":"the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","type":"reference","isActive":true},{"type":"text","text":" method for overriding dependencies."}],"role":"article","title":"Migrating to 1.9","url":"\/documentation\/composablearchitecture\/migratingto1.9","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigrationGuides":{"url":"\/documentation\/composablearchitecture\/migrationguides","abstract":[{"text":"Learn how to upgrade your application to the newest version of the Composable Architecture.","type":"text"}],"type":"topic","title":"Migration guides","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides","kind":"article","role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.14":{"title":"Migrating to 1.14","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","type":"topic","kind":"article","url":"\/documentation\/composablearchitecture\/migratingto1.14","abstract":[{"text":"The ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference"},{"text":" type is now officially ","type":"text"},{"code":"@MainActor","type":"codeVoice"},{"text":" isolated.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.17.1":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17.1","type":"topic","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.17.1","abstract":[{"type":"text","text":"The Sharing library has graduated, with backwards-incompatible changes, to 2.0, and the Composable"},{"type":"text","text":" "},{"type":"text","text":"Architecture has been updated to extend support to this new version."}],"kind":"article","title":"Migrating to 1.17.1"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.6":{"title":"Migrating to 1.6","type":"topic","abstract":[{"type":"text","text":"Update your code to make use of the new"},{"type":"text","text":" "},{"type":"codeVoice","code":"TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x"},{"type":"text","text":" method when you need to"},{"type":"text","text":" "},{"type":"text","text":"assert on the payload inside an action received."}],"role":"article","kind":"article","url":"\/documentation\/composablearchitecture\/migratingto1.6","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.15":{"title":"Migrating to 1.15","abstract":[{"type":"text","text":"The library has been completely updated for Swift 6 language mode, and now compiles in strict"},{"type":"text","text":" "},{"type":"text","text":"concurrency with no warnings or errors."}],"url":"\/documentation\/composablearchitecture\/migratingto1.15","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","type":"topic","kind":"article","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/dependency(_:)":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"dependency"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_DependencyKeyWritingReducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/reducer\/dependency(_:)","type":"topic","abstract":[{"type":"text","text":"Places a value in the reducer’s dependencies."}],"title":"dependency(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.12":{"url":"\/documentation\/composablearchitecture\/migratingto1.12","role":"article","abstract":[{"text":"Take advantage of custom decoding and encoding logic for the shared file storage persistence","type":"text"},{"text":" ","type":"text"},{"text":"strategy, as well as beta support for Swift’s native Testing framework.","type":"text"}],"title":"Migrating to 1.12","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.18":{"role":"article","type":"topic","abstract":[{"type":"text","text":"Stores now automatically cancel their in-flight effects when they deallocate. And another UIKit"},{"type":"text","text":" "},{"type":"text","text":"navigation helper has been introduced."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.18","title":"Migrating to 1.18","url":"\/documentation\/composablearchitecture\/migratingto1.18","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.5":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.5","type":"topic","abstract":[{"text":"Update your code to make use of the new ","type":"text"},{"code":"Store\/scope(state:action:)-90255","type":"codeVoice"},{"text":" operation on ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"in order to improve the performance of your features and simplify the usage of navigation APIs.","type":"text"}],"title":"Migrating to 1.5"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharingState":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState","role":"article","title":"Sharing state","kind":"article","url":"\/documentation\/composablearchitecture\/sharingstate","abstract":[{"text":"Learn techniques for sharing state throughout many parts of your application, and how to persist","type":"text"},{"text":" ","type":"text"},{"text":"data to user defaults, the file system, and other external mediums.","type":"text"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.11":{"url":"\/documentation\/composablearchitecture\/migratingto1.11","title":"Migrating to 1.11","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","kind":"article","abstract":[{"type":"text","text":"Update your code to use the new "},{"type":"codeVoice","code":"withLock"},{"type":"text","text":" method for mutating shared state from asynchronous"},{"type":"text","text":" "},{"type":"text","text":"contexts, rather than mutating the underlying wrapped value directly."}],"role":"article","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}],"url":"\/documentation\/composablearchitecture\/teststore","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","kind":"symbol","abstract":[{"text":"A testable runtime for a reducer.","type":"text"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"title":"TestStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"navigatorTitle":[{"text":"IfLetStore","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","url":"\/documentation\/composablearchitecture\/ifletstore","kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IfLetStore","kind":"identifier"}],"deprecated":true,"type":"topic","title":"IfLetStore","abstract":[{"text":"A view that safely unwraps a store of optional state in order to show one of two views.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"role":"symbol","type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"},{"text":"()","kind":"text"}],"abstract":[{"text":"Helps implement the conformance to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"text":" protocol for a type.","type":"text"}],"title":"Reducer()","url":"\/documentation\/composablearchitecture\/reducer()"},"#Mutating-shared-state-concurrently":{"type":"link","titleInlineContent":[{"type":"text","text":"Mutating shared state concurrently"}],"identifier":"#Mutating-shared-state-concurrently","title":"Mutating shared state concurrently","url":"#Mutating-shared-state-concurrently"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"abstract":[{"type":"text","text":"A Composable Architecture-friendly wrapper around "},{"type":"codeVoice","code":"ForEach"},{"type":"text","text":" that simplifies working with"},{"type":"text","text":" "},{"type":"text","text":"collections of state."}],"title":"ForEachStore","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ForEachStore"}],"type":"topic","deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","navigatorTitle":[{"text":"ForEachStore","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/foreachstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.17":{"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" property wrapper and related tools have been extracted to their own"},{"type":"text","text":" "},{"type":"text","text":"library so that they can be used in non-Composable Architecture applications. This a"},{"type":"text","text":" "},{"type":"text","text":"backwards compatible change, but some new deprecations have been introduced."}],"type":"topic","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17","kind":"article","title":"Migrating to 1.17","url":"\/documentation\/composablearchitecture\/migratingto1.17"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.13":{"abstract":[{"text":"The Composable Architecture now provides first class tools for building features in UIKit,","type":"text"},{"text":" ","type":"text"},{"text":"including minimal state observation, presentation and stack navigation.","type":"text"}],"kind":"article","title":"Migrating to 1.13","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.13","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13"},"#Supplying-mock-read-only-state-to-previews":{"identifier":"#Supplying-mock-read-only-state-to-previews","url":"#Supplying-mock-read-only-state-to-previews","type":"link","title":"Supplying mock read-only state to previews","titleInlineContent":[{"type":"text","text":"Supplying mock read-only state to previews"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.19":{"kind":"article","title":"Migrating to 1.19","role":"article","abstract":[{"type":"text","text":"Store internals have been rewritten for performance and future features, and are now compatible with"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI’s "},{"type":"codeVoice","code":"@StateObject"},{"type":"text","text":" property wrapper."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.19","url":"\/documentation\/composablearchitecture\/migratingto1.19","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"navigatorTitle":[{"text":"WithViewStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/withviewstore","title":"WithViewStore","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WithViewStore","kind":"identifier"}],"kind":"symbol","type":"topic","deprecated":true,"abstract":[{"text":"A view helper that transforms a ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"text":" into a ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"text":" so that its state can be observed","type":"text"},{"text":" ","type":"text"},{"text":"by a view builder.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"url":"\/documentation\/composablearchitecture\/store","type":"topic","abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"text":" ","type":"text"},{"text":"around to views that need to interact with the application.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}],"title":"Store","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"Store","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.4":{"kind":"article","role":"article","type":"topic","title":"Migrating to 1.4","abstract":[{"type":"text","text":"Update your code to make use of the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true,"type":"reference"},{"type":"text","text":" macro, and learn how to better leverage case key"},{"type":"text","text":" "},{"type":"text","text":"paths in your features."}],"url":"\/documentation\/composablearchitecture\/migratingto1.4","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4"},"#Migrating-to-1112":{"type":"link","titleInlineContent":[{"type":"text","text":"Migrating to 1.11.2"}],"identifier":"#Migrating-to-1112","title":"Migrating to 1.11.2","url":"#Migrating-to-1112"}}}