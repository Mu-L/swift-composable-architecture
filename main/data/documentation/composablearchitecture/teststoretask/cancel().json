{"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreTask\/cancel()"},"metadata":{"symbolKind":"method","role":"symbol","title":"cancel()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"cancel","kind":"identifier"},{"text":"() ","kind":"text"},{"text":"async","kind":"keyword"}],"roleHeading":"Instance Method","externalID":"s:22ComposableArchitecture13TestStoreTaskV6cancelyyYaF","modules":[{"name":"ComposableArchitecture"}]},"sections":[],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"cancel"},{"kind":"text","text":"() "},{"kind":"keyword","text":"async"}]}],"kind":"declarations"},{"content":[{"level":2,"anchor":"discussion","type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"This can be handy when a feature needs to start a long-living effect when the feature appears,","type":"text"},{"text":" ","type":"text"},{"text":"but cancellation of that effect is handled by the parent when the feature disappears. Such a","type":"text"},{"text":" ","type":"text"},{"text":"feature is difficult to exhaustively test in isolation because there is no action in its","type":"text"},{"text":" ","type":"text"},{"text":"domain that cancels the effect:","type":"text"}]},{"code":["let store = TestStore(\/* ... *\/)","","let onAppearTask = await store.send(.onAppear)","\/\/ Assert what is happening in the feature","","await onAppearTask.cancel() \/\/ âœ… Cancel the task to simulate the feature disappearing."],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreTask"]]},"variants":[{"paths":["\/documentation\/composablearchitecture\/teststoretask\/cancel()"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"text":"Cancels the underlying task and waits for it to finish.","type":"text"}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStoreTask/cancel()":{"kind":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"cancel","kind":"identifier"},{"text":"() ","kind":"text"},{"text":"async","kind":"keyword"}],"role":"symbol","title":"cancel()","url":"\/documentation\/composablearchitecture\/teststoretask\/cancel()","abstract":[{"type":"text","text":"Cancels the underlying task and waits for it to finish."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreTask\/cancel()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}],"url":"\/documentation\/composablearchitecture\/teststore","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","kind":"symbol","abstract":[{"text":"A testable runtime for a reducer.","type":"text"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"title":"TestStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStoreTask":{"navigatorTitle":[{"kind":"identifier","text":"TestStoreTask"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreTask","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStoreTask"}],"type":"topic","url":"\/documentation\/composablearchitecture\/teststoretask","role":"symbol","title":"TestStoreTask","abstract":[{"type":"text","text":"The type returned from "},{"type":"codeVoice","code":"TestStore\/send(_:assert:fileID:file:line:column:)-8f2pl"},{"type":"text","text":" that represents the"},{"type":"text","text":" "},{"type":"text","text":"lifecycle of the effect started from sending an action."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","type":"topic","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"kind":"symbol","url":"\/documentation\/composablearchitecture","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection"}}}