{"sections":[{"kind":"hero","estimatedTimeInMinutes":40,"content":[{"type":"paragraph","inlineContent":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}]}],"title":"Testing presentation","chapter":"Navigation"},{"kind":"tasks","tasks":[{"stepsSection":[{"code":"02-03-01-code-0000.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Add a new file, ContactsFeatureTests.swift, to your test target and paste in some basic","type":"text"},{"text":" ","type":"text"},{"text":"scaffolding for a test.","type":"text"}]}],"media":null,"type":"step","caption":[]},{"code":"02-03-01-code-0001.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Construct a test store by supplying the initial state the feature should start in, as well"},{"type":"text","text":" "},{"type":"text","text":"as the reducer that is being tested."}]}],"media":null,"type":"step","caption":[{"style":"note","name":"Note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"See "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature"},{"type":"text","text":" for a tutorial on testing, as well as the article"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestingTCA"},{"type":"text","text":" for more detailed information."}],"type":"paragraph"}]}]},{"type":"step","content":[{"inlineContent":[{"text":"Emulate the user tapping on the “+” button by sending the ","type":"text"},{"code":"addButtonTapped","type":"codeVoice"},{"text":" action. The","type":"text"},{"text":" ","type":"text"},{"text":"trailing closure provided is where we will assert on how state changes after sending","type":"text"},{"text":" ","type":"text"},{"text":"the action.","type":"text"}],"type":"paragraph"}],"media":null,"code":"02-03-01-code-0002.swift","runtimePreview":null,"caption":[]},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"The only mutation we expect to happen is that the "},{"type":"codeVoice","code":"destination"},{"type":"text","text":" field becomes populated"},{"type":"text","text":" "},{"type":"text","text":"with some data, in particular the "},{"type":"codeVoice","code":"addContact"},{"type":"text","text":" case of the destination enum."}],"type":"paragraph"}],"media":null,"code":"02-03-01-code-0003.swift","runtimePreview":null,"caption":[]},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"addContact"},{"type":"text","text":" case will hold onto some data, which is "},{"type":"codeVoice","code":"AddContactFeature.State"},{"type":"text","text":"."}]}],"media":null,"code":"02-03-01-code-0004.swift","runtimePreview":null,"caption":[]},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"To construct that state we need to construct a "},{"code":"Contact","type":"codeVoice"},{"type":"text","text":" value, and now we run into"},{"type":"text","text":" "},{"type":"text","text":"trouble. What can we provide for the ID?"}],"type":"paragraph"}],"media":null,"code":"02-03-01-code-0005.swift","runtimePreview":null,"caption":[]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"ContactsFeature"},{"type":"text","text":" currently makes use of an uncontrolled dependency, making it very hard"},{"type":"text","text":" "},{"type":"text","text":"to test this feature. It constructs a random UUID when presenting this feature, and we can’t"},{"type":"text","text":" "},{"type":"text","text":"predict that ID to get a passing test. So, just as we did in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"we will add a dependency on a UUID generator to our "},{"type":"codeVoice","code":"ContactsFeature"},{"type":"text","text":"."}]},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go back to ContactsFeature.swift, and add a dependency on the UUID generator."}]}],"media":null,"code":"02-03-01-code-0006.swift","runtimePreview":null,"caption":[]},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Use the newly added UUID dependency for creating UUIDs rather than reaching out to the"},{"type":"text","text":" "},{"type":"text","text":"global, uncontrollable initializer."}],"type":"paragraph"}],"media":null,"code":"02-03-01-code-0007.swift","runtimePreview":null,"caption":[]},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Go back to ContactsFeatureTests.swift and override the dependencies on the test store so","type":"text"},{"text":" ","type":"text"},{"text":"that it uses a controlled UUID generator. In particular, we will use the “incrementing”","type":"text"},{"text":" ","type":"text"},{"text":"generator, which generates sequential, increasing IDs starting at 0.","type":"text"}]}],"media":null,"code":"02-03-01-code-0008.swift","runtimePreview":null,"caption":[]},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Now we can predict the UUID generated when the contact is created."}],"type":"paragraph"}],"media":null,"code":"02-03-01-code-0009.swift","runtimePreview":null,"caption":[{"name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"The initializer on UUID that allows providing an integer is provided by our","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"http:\/\/github.com\/pointfreeco\/swift-dependencies","isActive":true},{"text":" library, which the Composable Architecture","type":"text"},{"text":" ","type":"text"},{"text":"depends on.","type":"text"}]}],"style":"note"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This test passes! So this proves that when the “+” button is tapped, that a sheet will fly"},{"type":"text","text":" "},{"type":"text","text":"up for the “Add Contact” feature. Let’s keep asserting on more of the user flow."}]},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Emulate the user typing into the name text field of the contact. The trailing closure is"},{"type":"text","text":" "},{"type":"text","text":"where we can assert on how state changed after sending the action."}],"type":"paragraph"}],"media":null,"code":"02-03-01-code-0010.swift","runtimePreview":null,"caption":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The payload of an action can be sent as a second argument when using case key path"},{"type":"text","text":" "},{"type":"text","text":"syntax."}]}],"name":"Tip","type":"aside","style":"tip"}]},{"type":"step","content":[{"inlineContent":[{"text":"Assert on how state changed by mutating the ","type":"text"},{"code":"destination","type":"codeVoice"},{"text":" through the ","type":"text"},{"code":"addContact","type":"codeVoice"},{"text":" case of","type":"text"},{"text":" ","type":"text"},{"text":"the destination enum.","type":"text"}],"type":"paragraph"}],"media":null,"code":"02-03-01-code-0011.swift","runtimePreview":null,"caption":[{"inlineContent":[{"type":"text","text":"To do this we can chain into the "},{"type":"codeVoice","code":"addContact"},{"type":"text","text":" case name directly and mutate a part of its"},{"type":"text","text":" "},{"type":"text","text":"associated value."}],"type":"paragraph"},{"style":"tip","name":"Tip","type":"aside","content":[{"inlineContent":[{"type":"text","text":"To use the "},{"code":"modify","type":"codeVoice"},{"type":"text","text":" helper on an enum to mutate an associated value, the enum must"},{"type":"text","text":" "},{"type":"text","text":"be annotated with "},{"code":"@CasePathable","type":"codeVoice"},{"type":"text","text":". The "},{"code":"@Reducer","type":"codeVoice"},{"type":"text","text":" macro automatically applies"},{"type":"text","text":" "},{"type":"text","text":"this annotation to enum-based "},{"code":"State","type":"codeVoice"},{"type":"text","text":", but you must manually apply it to other enums."}],"type":"paragraph"}]}]},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Emulate the user tapping the “Save” button in the “Add Contact” feature. We do not"},{"type":"text","text":" "},{"type":"text","text":"expect the state to change immediately when sending this action, and so we do not need"},{"type":"text","text":" "},{"type":"text","text":"to provide a trailing closure."}]}],"media":null,"code":"02-03-01-code-0012.swift","runtimePreview":null,"caption":[]},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Emulate the delegate action "},{"type":"codeVoice","code":"saveContact"},{"type":"text","text":" being received by the test store. This action is"},{"type":"text","text":" "},{"type":"text","text":"sent from the "},{"type":"codeVoice","code":"AddContactFeature"},{"type":"text","text":" when the “Save” button is tapped."}]}],"media":null,"code":"02-03-01-code-0013.swift","runtimePreview":null,"caption":[]},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Assert that when a delegate action is received that state mutates by adding a contact to the"},{"type":"text","text":" "},{"type":"text","text":"array."}],"type":"paragraph"}],"media":null,"code":"02-03-01-code-0014.swift","runtimePreview":null,"caption":[]},{"type":"step","content":[{"inlineContent":[{"text":"To further assert that the ","type":"text"},{"code":"saveContact","type":"codeVoice"},{"text":" delegate action was received, you must","type":"text"},{"text":" ","type":"text"},{"text":"annotate ","type":"text"},{"code":"AddContactFeature.Action.Delegate","type":"codeVoice"},{"text":" with the ","type":"text"},{"code":"@CasePathable","type":"codeVoice"},{"text":" macro.","type":"text"}],"type":"paragraph"}],"media":null,"code":"02-03-01-code-0015.swift","runtimePreview":null,"caption":[]},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now you can further dive into the "},{"type":"codeVoice","code":"saveContact"},{"type":"text","text":" case and even assert against its payload."}]}],"media":null,"code":"02-03-01-code-0016.swift","runtimePreview":null,"caption":[]},{"type":"step","content":[{"inlineContent":[{"text":"Finally assert that the test store receives a","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss"},{"text":" action, which causes the “Add Contact”","type":"text"},{"text":" ","type":"text"},{"text":"feature to be dismissed.","type":"text"}],"type":"paragraph"}],"media":null,"code":"02-03-01-code-0017.swift","runtimePreview":null,"caption":[]},{"type":"paragraph","inlineContent":[{"text":"This is a fully passing test, and proves the end-to-end lifecycle of presenting a child","type":"text"},{"text":" ","type":"text"},{"text":"feature, interacting with it, and how the child communicates information back to the parent.","type":"text"},{"text":" ","type":"text"},{"text":"However, this test is quite verbose, and is asserting on behavior that is local to just the","type":"text"},{"text":" ","type":"text"},{"text":"“Add Contact” feature. If we are only wanting to test at a high level that we can present","type":"text"},{"text":" ","type":"text"},{"text":"and dismiss a child feature, there is a better tool available called “non-exhaustive”","type":"text"},{"text":" ","type":"text"},{"text":"testing.","type":"text"}]}],"contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The first functionality we will test is adding a new contact. This entails emulating the"},{"type":"text","text":" "},{"type":"text","text":"entire user flow of the user tapping the “+” button, typing into the name text field,"},{"type":"text","text":" "},{"type":"text","text":"tapping the “Save” button, and confirming that the sheet is dismissed and the new contact"},{"type":"text","text":" "},{"type":"text","text":"is added to the list."}]}]}],"anchor":"Testing-the-add-contact-flow","title":"Testing the add contact flow"},{"anchor":"Non-exhaustive-testing","contentSection":[{"content":[{"inlineContent":[{"text":"The previously written test is powerful and impressive, but also verbose. We had to assert","type":"text"},{"text":" ","type":"text"},{"text":"on how everything evolves in the child feature, and had to assert how every effect action","type":"text"},{"text":" ","type":"text"},{"text":"is received by the store. Sometimes it can be useful to write tests in a less exhaustive","type":"text"},{"text":" ","type":"text"},{"text":"manner, especially when testing the integration of many features, such as is the case with","type":"text"},{"text":" ","type":"text"},{"text":"features performing navigation.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"See "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestingTCA#Non-exhaustive-testing","isActive":true},{"type":"text","text":" for more information on non-exhaustive testing"},{"type":"text","text":" "},{"type":"text","text":"techniques."}],"type":"paragraph"}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"title":"Non-exhaustive testing","stepsSection":[{"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Start a new test case to test the same “Add Contact” user flow as above, but this time"},{"type":"text","text":" "},{"type":"text","text":"we will do it in the non-exhaustive style."}],"type":"paragraph"}],"media":null,"type":"step","caption":[],"code":"02-03-02-code-0000.swift"},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Set the test store’s ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","isActive":true,"type":"reference"},{"text":" to ","type":"text"},{"code":".off","type":"codeVoice"},{"text":".","type":"text"}]}],"media":null,"type":"step","caption":[],"code":"02-03-02-code-0001.swift"},{"runtimePreview":null,"content":[{"inlineContent":[{"text":"Emulate the user tapping on the “+” button, but this time do not provide a trailing","type":"text"},{"text":" ","type":"text"},{"text":"closure. In non-exhaustive test stores there is no need to assert on state changes if you","type":"text"},{"text":" ","type":"text"},{"text":"do not want to.","type":"text"}],"type":"paragraph"}],"media":null,"type":"step","caption":[],"code":"02-03-02-code-0002.swift"},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Emulate the user typing into the name text field of the contact, but again do not assert"},{"type":"text","text":" "},{"type":"text","text":"on any state changes in the child feature."}]}],"media":null,"type":"step","caption":[],"code":"02-03-02-code-0003.swift"},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Emulate the user tapping the “Save” button in the child feature."}]}],"media":null,"type":"step","caption":[],"code":"02-03-02-code-0004.swift"},{"runtimePreview":null,"content":[{"inlineContent":[{"text":"Next we want to assert that sometime after the user taps the “Save” button that the","type":"text"},{"text":" ","type":"text"},{"text":"contact is added to the array and the child feature is dismissed. However, we cannot assert","type":"text"},{"text":" ","type":"text"},{"text":"on that until all the actions have been received, and so we can do that by using","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/skipReceivedActions(strict:fileID:file:line:column:)","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"}],"media":null,"type":"step","caption":[],"code":"02-03-02-code-0005.swift"},{"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Assert that the final state of the feature has a new contact added to the array and the"},{"type":"text","text":" "},{"type":"codeVoice","code":"destination"},{"type":"text","text":" state is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"’d out."}],"type":"paragraph"}],"media":null,"type":"step","caption":[],"code":"02-03-02-code-0006.swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"That’s all it takes to write a very high level test covering the full user flow of adding"},{"type":"text","text":" "},{"type":"text","text":"a new contact to the list. We don’t need to assert on all of the nitty gritty details in"},{"type":"text","text":" "},{"type":"text","text":"the child feature, and instead can just assert that the contact was indeed added after the"},{"type":"text","text":" "},{"type":"text","text":"user completed their steps."}]}]},{"anchor":"Testing-the-delete-contact-flow","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"The last important piece of functionality to test is deleting a contact. This involves tapping","type":"text"},{"text":" ","type":"text"},{"text":"a button, asserting that an alert is shown, confirming the deletion through the alert, and","type":"text"},{"text":" ","type":"text"},{"text":"then asserting that indeed the contact was removed.","type":"text"}]}],"mediaPosition":"trailing"}],"title":"Testing the delete contact flow","stepsSection":[{"caption":[],"media":null,"code":"02-03-03-code-0000.swift","runtimePreview":null,"content":[{"inlineContent":[{"text":"Start a new test method to test the delete flow.","type":"text"}],"type":"paragraph"}],"type":"step"},{"caption":[],"media":null,"code":"02-03-03-code-0001.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Create a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference"},{"text":" for testing the ","type":"text"},{"code":"ContactsFeature","type":"codeVoice"},{"text":" reducer.","type":"text"},{"text":" ","type":"text"},{"text":"This time we do not need to override any dependencies because we do not expect any to be","type":"text"},{"text":" ","type":"text"},{"text":"used","type":"text"}]}],"type":"step"},{"caption":[],"media":null,"code":"02-03-03-code-0002.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Start the initial state of the feature with some contacts already added to the array. This"},{"type":"text","text":" "},{"type":"text","text":"will make it easier to test the deletion behavior."}]}],"type":"step"},{"caption":[],"media":null,"code":"02-03-03-code-0003.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Emulate the user tapping on the delete button by sending the ","type":"text"},{"code":"deleteButtonTapped","type":"codeVoice"},{"text":" action.","type":"text"},{"text":" ","type":"text"},{"text":"We will test deleting the second contact, which has an ID of ","type":"text"},{"code":"UUID(1)","type":"codeVoice"},{"text":".","type":"text"}]}],"type":"step"},{"caption":[],"media":null,"code":"02-03-03-code-0004.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We expect that the state’s "},{"type":"codeVoice","code":"destination"},{"type":"text","text":" field will be populated with the "},{"type":"codeVoice","code":"alert"},{"type":"text","text":" case"},{"type":"text","text":" "},{"type":"text","text":"since an alert should appear."}]}],"type":"step"},{"caption":[],"media":null,"code":"02-03-03-code-0005.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Technically we can simply repeat exactly what we did in the reducer for constructing the"},{"type":"text","text":" "},{"type":"text","text":"alert. It’s verbose, but it does get the test passing."}]}],"type":"step"},{"inlineContent":[{"type":"text","text":"However, that is a bit of a pain to repeat all of that work. There is a better way."}],"type":"paragraph"},{"caption":[],"media":null,"code":"02-03-03-code-0006.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go back to ContactsFeature.swift where the reducer is implemented. Extend "},{"type":"codeVoice","code":"AlertState"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"with its "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" generic constrained to "},{"type":"codeVoice","code":"ContactsFeature.Action"},{"type":"text","text":". Add a static function"},{"type":"text","text":" "},{"type":"text","text":"that constructs the alert, which allows us to reuse this logic in multiple places."}]}],"type":"step"},{"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Also to further assert that the "},{"type":"codeVoice","code":"confirmDeletion"},{"type":"text","text":" action was received,"},{"type":"text","text":" "},{"type":"text","text":"annotate "},{"type":"codeVoice","code":"ContactsFeature.Action.Alert"},{"type":"text","text":" with the "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" macro."}]}],"media":null,"code":"02-03-03-code-0007.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Make use of the new ","type":"text"},{"type":"codeVoice","code":"deleteConfirmation"},{"text":" static alert function in the ","type":"text"},{"type":"codeVoice","code":"ContactsFeature"},{"text":"","type":"text"},{"text":" ","type":"text"},{"text":"reducer, rather than building ","type":"text"},{"type":"codeVoice","code":"AlertState"},{"text":" from scratch.","type":"text"}]}],"type":"step"},{"caption":[{"inlineContent":[{"text":"Run the test to see this passes. This proves that when the delete button is tapped, an","type":"text"},{"text":" ","type":"text"},{"text":"alert is shown to the user.","type":"text"}],"type":"paragraph"}],"media":null,"code":"02-03-03-code-0008.swift","runtimePreview":null,"content":[{"inlineContent":[{"text":"Go back to ContactsFeatureTests.swift and use the new ","type":"text"},{"code":"deleteConfirmation","type":"codeVoice"},{"text":" static function","type":"text"},{"text":" ","type":"text"},{"text":"to assert against the alert, rather than building ","type":"text"},{"code":"AlertState","type":"codeVoice"},{"text":" from scratch.","type":"text"}],"type":"paragraph"}],"type":"step"},{"caption":[],"media":null,"code":"02-03-03-code-0009.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Emulate the user confirming to delete contact by sending the "},{"type":"codeVoice","code":"confirmDeletion"},{"type":"text","text":" action"},{"type":"text","text":" "},{"type":"text","text":"in the alert."}]}],"type":"step"},{"caption":[],"media":null,"code":"02-03-03-code-0010.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Assert that the alert was dismissed and that the contact corresponding to the ID of"},{"type":"text","text":" "},{"code":"UUID(1)","type":"codeVoice"},{"type":"text","text":" was removed."}]}],"type":"step"},{"inlineContent":[{"text":"That is all it takes to test the deletion flow. Run the test suite to see everything passes,","type":"text"},{"text":" ","type":"text"},{"text":"proving that when the user taps the confirmation button in the alert that indeed the contact","type":"text"},{"text":" ","type":"text"},{"text":"will be removed.","type":"text"}],"type":"paragraph"}]}]},{"featuredEyebrow":"Tutorial","title":"Navigation stacks","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"kind":"callToAction","action":{"type":"reference","overridingTitle":"Get started","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","overridingTitleInlineContent":[{"type":"text","text":"Get started"}]}}],"metadata":{"category":"The Composable Architecture","categoryPathComponent":"MeetComposableArchitecture","title":"Testing presentation","role":"project"},"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"project","hierarchy":{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","modules":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","kind":"task"}]}]}],"paths":[["doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation"]]},"identifier":{"url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/composablearchitecture\/02-03-testingpresentation"]}],"references":{"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Child-to-parent-communication":{"kind":"section","type":"section","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"title":"Child-to-parent communication","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Child-to-parent-communication"},"02-03-02-code-0005.swift":{"fileType":"swift","type":"file","syntax":"swift","identifier":"02-03-02-code-0005.swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlowNonExhaustive() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","    ","    await store.send(.addButtonTapped)","    await store.send(\\.destination.addContact.setName, \"Blob Jr.\")","    await store.send(\\.destination.addContact.saveButtonTapped)","    await store.skipReceivedActions()","  }","}"],"highlights":[{"line":21}],"fileName":"ContactsFeatureTests.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Managing-a-timer":{"abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}],"type":"section","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Managing-a-timer","title":"Managing a timer"},"02-03-01-code-0003.swift":{"highlights":[{"line":15},{"line":16}],"fileType":"swift","identifier":"02-03-01-code-0003.swift","fileName":"ContactsFeatureTests.swift","syntax":"swift","content":["import ComposableArchitecture","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    }","    ","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","      )","    }","  }","}"],"type":"file"},"02-03-01-code-0013.swift":{"content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    ","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          contact: Contact(id: UUID(0), name: \"\")","        )","      )","    }","    await store.send(\\.destination.addContact.setName, \"Blob Jr.\") {","      $0.destination?.modify(\\.addContact) { $0.contact.name = \"Blob Jr.\" }","    }","    await store.send(\\.destination.addContact.saveButtonTapped)","    await store.receive(","      \\.destination.addContact.delegate.saveContact,","      Contact(id: UUID(0), name: \"Blob Jr.\")","    ) {","    }","  }","}"],"highlights":[{"line":28},{"line":29},{"line":30},{"line":31},{"line":32}],"type":"file","fileType":"swift","syntax":"swift","fileName":"ContactsFeatureTests.swift","identifier":"02-03-01-code-0013.swift"},"02-03-01-code-0004.swift":{"highlights":[{"line":16},{"line":17}],"fileType":"swift","identifier":"02-03-01-code-0004.swift","fileName":"ContactsFeatureTests.swift","syntax":"swift","content":["import ComposableArchitecture","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    }","    ","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","        )","      )","    }","  }","}"],"type":"file"},"02-03-02-code-0006.swift":{"syntax":"swift","type":"file","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlowNonExhaustive() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","    ","    await store.send(.addButtonTapped)","    await store.send(\\.destination.addContact.setName, \"Blob Jr.\")","    await store.send(\\.destination.addContact.saveButtonTapped)","    await store.skipReceivedActions()","    store.assert {","      $0.contacts = [","        Contact(id: UUID(0), name: \"Blob Jr.\")","      ]","      $0.destination = nil","    }","  }","}"],"highlights":[{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27}],"fileType":"swift","fileName":"ContactsFeatureTests.swift","identifier":"02-03-02-code-0006.swift"},"02-03-01-code-0017.swift":{"syntax":"swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    ","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          contact: Contact(id: UUID(0), name: \"\")","        )","      )","    }","    await store.send(\\.destination.addContact.setName, \"Blob Jr.\") {","      $0.destination?.modify(\\.addContact) { $0.contact.name = \"Blob Jr.\" }","    }","    await store.send(\\.destination.addContact.saveButtonTapped)","    await store.receive(","      \\.destination.addContact.delegate.saveContact,","      Contact(id: UUID(0), name: \"Blob Jr.\")","    ) {","      $0.contacts = [","        Contact(id: UUID(0), name: \"Blob Jr.\")","      ]","    }","    await store.receive(\\.destination.dismiss) {","      $0.destination = nil","    }","  }","}"],"fileType":"swift","identifier":"02-03-01-code-0017.swift","type":"file","fileName":"ContactsFeatureTests.swift","highlights":[{"line":36},{"line":37},{"line":38}]},"http://github.com/pointfreeco/swift-dependencies":{"titleInlineContent":[{"type":"text","text":"swift-dependencies"}],"type":"link","title":"swift-dependencies","url":"http:\/\/github.com\/pointfreeco\/swift-dependencies","identifier":"http:\/\/github.com\/pointfreeco\/swift-dependencies"},"02-03-03-code-0002.swift":{"fileName":"ContactsFeatureTests.swift","fileType":"swift","highlights":[{"line":2},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18}],"content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func deleteContact() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      initialState: ContactsFeature.State(","        contacts: [","          Contact(id: UUID(0), name: \"Blob\"),","          Contact(id: UUID(1), name: \"Blob Jr.\"),","        ]","      )","    ) {","      ContactsFeature()","    }","  }","}"],"type":"file","identifier":"02-03-03-code-0002.swift","syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Deleting-a-contact":{"type":"section","role":"pseudoSymbol","title":"Deleting a contact","kind":"section","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Deleting-a-contact"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Delete-contacts":{"abstract":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"text":"many","type":"text"}]},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Delete-contacts","role":"pseudoSymbol","type":"section","title":"Delete contacts","kind":"section"},"02-03-03-code-0004.swift":{"fileName":"ContactsFeatureTests.swift","fileType":"swift","syntax":"swift","identifier":"02-03-03-code-0004.swift","highlights":[{"line":23},{"line":24}],"type":"file","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func deleteContact() async {","    let store = TestStore(","      initialState: ContactsFeature.State(","        contacts: [","          Contact(id: UUID(0), name: \"Blob\"),","          Contact(id: UUID(1), name: \"Blob Jr.\"),","        ]","      )","    ) {","      ContactsFeature()","    }","    ","    await store.send(.deleteButtonTapped(id: UUID(1))) {","      $0.destination = .alert(","      )","    }","  }","}"]},"02-03-03-code-0006.swift":{"content":["import ComposableArchitecture","","extension AlertState where Action == ContactsFeature.Action.Alert {","  static func deleteConfirmation(id: UUID) -> Self {","    Self {","      TextState(\"Are you sure?\")","    } actions: {","      ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","        TextState(\"Delete\")","      }","    }","  }","}"],"syntax":"swift","fileName":"ContactsFeature.swift","highlights":[],"fileType":"swift","type":"file","identifier":"02-03-03-code-0006.swift"},"02-03-02-code-0004.swift":{"fileType":"swift","type":"file","syntax":"swift","identifier":"02-03-02-code-0004.swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlowNonExhaustive() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","    ","    await store.send(.addButtonTapped)","    await store.send(\\.destination.addContact.setName, \"Blob Jr.\")","    await store.send(\\.destination.addContact.saveButtonTapped)","  }","}"],"highlights":[{"line":20}],"fileName":"ContactsFeatureTests.swift"},"02-03-01-code-0002.swift":{"highlights":[{"line":13},{"line":14},{"line":15}],"syntax":"swift","fileName":"ContactsFeatureTests.swift","content":["import ComposableArchitecture","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    }","    ","    await store.send(.addButtonTapped) {","    }","  }","}"],"type":"file","identifier":"02-03-01-code-0002.swift","fileType":"swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/dismiss":{"title":"PresentationAction.dismiss","abstract":[{"text":"An action sent to ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" out the associated presentation state.","type":"text"}],"type":"topic","url":"\/documentation\/composablearchitecture\/presentationaction\/dismiss","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss","role":"symbol","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"dismiss","kind":"identifier"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Create-a-reducer":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"title":"Create a reducer","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Create-a-reducer","role":"pseudoSymbol","kind":"section","type":"section"},"02-03-01-code-0014.swift":{"syntax":"swift","identifier":"02-03-01-code-0014.swift","fileType":"swift","type":"file","fileName":"ContactsFeatureTests.swift","highlights":[{"line":32},{"line":33},{"line":34}],"content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    ","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          contact: Contact(id: UUID(0), name: \"\")","        )","      )","    }","    await store.send(\\.destination.addContact.setName, \"Blob Jr.\") {","      $0.destination?.modify(\\.addContact) { $0.contact.name = \"Blob Jr.\" }","    }","    await store.send(\\.destination.addContact.saveButtonTapped)","    await store.receive(","      \\.destination.addContact.delegate.saveContact,","      Contact(id: UUID(0), name: \"Blob Jr.\")","    ) {","      $0.contacts = [","        Contact(id: UUID(0), name: \"Blob Jr.\")","      ]","    }","  }","}"]},"02-03-01-code-0016.swift":{"fileType":"swift","fileName":"ContactsFeatureTests.swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    ","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          contact: Contact(id: UUID(0), name: \"\")","        )","      )","    }","    await store.send(\\.destination.addContact.setName, \"Blob Jr.\") {","      $0.destination?.modify(\\.addContact) { $0.contact.name = \"Blob Jr.\" }","    }","    await store.send(\\.destination.addContact.saveButtonTapped)","    await store.receive(","      \\.destination.addContact.delegate.saveContact,","      Contact(id: UUID(0), name: \"Blob Jr.\")","    ) {","      $0.contacts = [","        Contact(id: UUID(0), name: \"Blob Jr.\")","      ]","    }","  }","}"],"identifier":"02-03-01-code-0016.swift","syntax":"swift","highlights":[],"type":"file"},"02-03-01-code-0015.swift":{"fileType":"swift","type":"file","syntax":"swift","identifier":"02-03-01-code-0015.swift","content":["import ComposableArchitecture","","@Reducer","struct AddContactFeature {","  @ObservableState","  struct State: Equatable {","    var contact: Contact","  }","  enum Action {","    case cancelButtonTapped","    case delegate(Delegate)","    case saveButtonTapped","    case setName(String)","    @CasePathable","    enum Delegate {","      case saveContact(Contact)","    }","  }","  @Dependency(\\.dismiss) var dismiss","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .cancelButtonTapped:","        return .run { _ in await self.dismiss() }","","      case .delegate:","        return .none","","      case .saveButtonTapped:","        return .run { [contact = state.contact] send in","          await send(.delegate(.saveContact(contact)))","          await self.dismiss()","        }","","      case let .setName(name):","        state.contact.name = name","        return .none","      }","    }","  }","}"],"highlights":[{"line":14}],"fileName":"ContactsFeature.swift"},"02-03-01-code-0009.swift":{"fileType":"swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    ","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          contact: Contact(id: UUID(0), name: \"\")","        )","      )","    }","  }","}"],"highlights":[{"line":2},{"line":20}],"identifier":"02-03-01-code-0009.swift","syntax":"swift","type":"file","fileName":"ContactsFeatureTests.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Adding-a-tab-view":{"type":"section","kind":"section","title":"Adding a tab view","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"type":"text","text":"feature that contains the "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" we have been building thus far."}],"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Adding-a-tab-view"},"02-03-01-code-0000.swift":{"highlights":[],"fileName":"ContactsFeatureTests.swift","syntax":"swift","type":"file","identifier":"02-03-01-code-0000.swift","content":["import ComposableArchitecture","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","  }","}"],"fileType":"swift"},"02-03-01-code-0005.swift":{"fileType":"swift","content":["import ComposableArchitecture","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    }","    ","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          contact: Contact(id: ???, name: \"\")","        )","      )","    }","  }","}"],"fileName":"ContactsFeatureTests.swift","highlights":[{"line":17}],"syntax":"swift","identifier":"02-03-01-code-0005.swift","type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation":{"estimatedTime":"30min","kind":"project","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation","title":"Your first presentation","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Drill-down-to-contact-detail":{"url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Drill-down-to-contact-detail","kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","title":"Drill-down to contact detail","type":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}],"url":"\/documentation\/composablearchitecture\/teststore","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","kind":"symbol","abstract":[{"text":"A testable runtime for a reducer.","type":"text"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"title":"TestStore"},"02-03-03-code-0008.swift":{"fileType":"swift","type":"file","syntax":"swift","identifier":"02-03-03-code-0008.swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func deleteContact() async {","    let store = TestStore(","      initialState: ContactsFeature.State(","        contacts: [","          Contact(id: UUID(0), name: \"Blob\"),","          Contact(id: UUID(1), name: \"Blob Jr.\"),","        ]","      )","    ) {","      ContactsFeature()","    }","    ","    await store.send(.deleteButtonTapped(id: UUID(1))) {","      $0.destination = .alert(.deleteConfirmation(id: UUID(1)))","    }","  }","}"],"highlights":[{"line":23}],"fileName":"ContactsFeatureTests.swift"},"02-03-01-code-0010.swift":{"syntax":"swift","identifier":"02-03-01-code-0010.swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    ","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          contact: Contact(id: UUID(0), name: \"\")","        )","      )","    }","    await store.send(\\.destination.addContact.setName, \"Blob Jr.\") {","    }","  }","}"],"highlights":[{"line":24},{"line":25}],"type":"file","fileName":"ContactsFeatureTests.swift","fileType":"swift"},"02-03-03-code-0001.swift":{"syntax":"swift","type":"file","fileName":"ContactsFeatureTests.swift","identifier":"02-03-03-code-0001.swift","content":["import ComposableArchitecture","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func deleteContact() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    }","  }","}"],"highlights":[{"line":10},{"line":11},{"line":12}],"fileType":"swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/skipReceivedActions(strict:fileID:file:line:column:)":{"role":"symbol","title":"skipReceivedActions(strict:fileID:file:line:column:)","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/skipReceivedActions(strict:fileID:file:line:column:)","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"State"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"url":"\/documentation\/composablearchitecture\/teststore\/skipreceivedactions(strict:fileid:file:line:column:)","abstract":[{"text":"Clears the queue of received actions from effects.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"skipReceivedActions","kind":"identifier"},{"text":"(","kind":"text"},{"text":"strict","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"kind":"symbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks":{"kind":"project","type":"topic","estimatedTime":"30min","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"title":"Navigation stacks","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","role":"project","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-add-contact-flow":{"url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-add-contact-flow","kind":"section","type":"section","title":"Testing the add contact flow","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"role":"pseudoSymbol"},"02-03-03-code-0000.swift":{"highlights":[],"identifier":"02-03-03-code-0000.swift","syntax":"swift","content":["import ComposableArchitecture","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func deleteContact() async {","  }","}"],"fileType":"swift","fileName":"ContactsFeatureTests.swift","type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-delete-contact-flow":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","type":"section","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-delete-contact-flow","title":"Testing the delete contact flow","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}]},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Essentials":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","kind":"article","type":"topic","url":"\/tutorials\/meetcomposablearchitecture\/essentials","abstract":[],"role":"article","title":"Essentials"},"02-03-02-code-0000.swift":{"syntax":"swift","type":"file","fileName":"ContactsFeatureTests.swift","identifier":"02-03-02-code-0000.swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlowNonExhaustive() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","  }","}"],"highlights":[],"fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature":{"estimatedTime":"1hr 0min","type":"topic","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature","role":"project","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"kind":"project","title":"Testing your feature","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature"},"02-03-03-code-0010.swift":{"highlights":[{"line":26},{"line":27},{"line":28},{"line":29}],"identifier":"02-03-03-code-0010.swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func deleteContact() async {","    let store = TestStore(","      initialState: ContactsFeature.State(","        contacts: [","          Contact(id: UUID(0), name: \"Blob\"),","          Contact(id: UUID(1), name: \"Blob Jr.\"),","        ]","      )","    ) {","      ContactsFeature()","    }","    ","    await store.send(.deleteButtonTapped(id: UUID(1))) {","      $0.destination = .alert(.deleteConfirmation(id: UUID(1)))","    }","    await store.send(\\.destination.alert.confirmDeletion, UUID(1)) {","      $0.contacts = [","        Contact(id: UUID(0), name: \"Blob\")","      ]","      $0.destination = nil","    }","  }","}"],"type":"file","syntax":"swift","fileType":"swift","fileName":"ContactsFeatureTests.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-with-SwiftUI":{"kind":"section","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-with-SwiftUI","title":"Integrating with SwiftUI","type":"section","role":"pseudoSymbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/exhaustivity":{"type":"topic","title":"exhaustivity","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"exhaustivity"},{"kind":"text","text":": "},{"preciseIdentifier":"s:22ComposableArchitecture12ExhaustivityO","kind":"typeIdentifier","text":"Exhaustivity"}],"abstract":[{"type":"text","text":"The current exhaustivity level of the test store."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","kind":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/exhaustivity"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Controlling-dependencies":{"role":"pseudoSymbol","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"kind":"section","title":"Controlling dependencies","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Controlling-dependencies"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Composing-reducers":{"role":"pseudoSymbol","title":"Composing reducers","kind":"section","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"type":"text","text":"feature that contains the "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" we have been building thus far."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers","type":"section","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Composing-reducers"},"02-03-03-code-0009.swift":{"identifier":"02-03-03-code-0009.swift","fileName":"ContactsFeatureTests.swift","fileType":"swift","type":"file","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func deleteContact() async {","    let store = TestStore(","      initialState: ContactsFeature.State(","        contacts: [","          Contact(id: UUID(0), name: \"Blob\"),","          Contact(id: UUID(1), name: \"Blob Jr.\"),","        ]","      )","    ) {","      ContactsFeature()","    }","    ","    await store.send(.deleteButtonTapped(id: UUID(1))) {","      $0.destination = .alert(.deleteConfirmation(id: UUID(1)))","    }","    await store.send(\\.destination.alert.confirmDeletion, UUID(1)) {","    }","  }","}"],"highlights":[{"line":25},{"line":26}],"syntax":"swift"},"02-03-02-code-0001.swift":{"type":"file","fileType":"swift","identifier":"02-03-02-code-0001.swift","fileName":"ContactsFeatureTests.swift","highlights":[{"line":16}],"syntax":"swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlowNonExhaustive() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Improve-domain-modeling":{"role":"pseudoSymbol","kind":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Improve-domain-modeling","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","abstract":[{"text":"In the previous section you learned how to model your domains so that a parent feature can","type":"text"},{"text":" ","type":"text"},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"text":" ","type":"text"},{"text":"able to present ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"text":" features.","type":"text"}],"type":"section","title":"Improve domain modeling"},"02-03-01-code-0011.swift":{"highlights":[{"line":25}],"identifier":"02-03-01-code-0011.swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    ","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          contact: Contact(id: UUID(0), name: \"\")","        )","      )","    }","    await store.send(\\.destination.addContact.setName, \"Blob Jr.\") {","      $0.destination?.modify(\\.addContact) { $0.contact.name = \"Blob Jr.\" }","    }","  }","}"],"syntax":"swift","fileType":"swift","fileName":"ContactsFeatureTests.swift","type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-state-changes":{"type":"section","kind":"section","role":"pseudoSymbol","title":"Testing state changes","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-state-changes"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature":{"url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature","estimatedTime":"20min","title":"Your first feature","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","role":"project","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"kind":"project","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation":{"type":"topic","title":"Testing presentation","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation","kind":"project","role":"project","estimatedTime":"40min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation"},"02-03-03-code-0007.swift":{"highlights":[{"line":12},{"line":41}],"type":"file","identifier":"02-03-03-code-0007.swift","syntax":"swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    @CasePathable","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  @Dependency(\\.uuid) var uuid","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: self.uuid(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","        ","      case .destination:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(.deleteConfirmation(id: id))","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination) {","      Destination.body","    }","  }","}"],"fileType":"swift","fileName":"ContactsFeature.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Contact-detail-feature":{"title":"Contact detail feature","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"type":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Contact-detail-feature","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","kind":"section","role":"pseudoSymbol"},"02-03-02-code-0003.swift":{"syntax":"swift","identifier":"02-03-02-code-0003.swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlowNonExhaustive() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","    ","    await store.send(.addButtonTapped)","    await store.send(\\.destination.addContact.setName, \"Blob Jr.\")","  }","}"],"highlights":[{"line":19}],"type":"file","fileName":"ContactsFeatureTests.swift","fileType":"swift"},"02-03-03-code-0003.swift":{"syntax":"swift","type":"file","fileName":"ContactsFeatureTests.swift","identifier":"02-03-03-code-0003.swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func deleteContact() async {","    let store = TestStore(","      initialState: ContactsFeature.State(","        contacts: [","          Contact(id: UUID(0), name: \"Blob\"),","          Contact(id: UUID(1), name: \"Blob Jr.\"),","        ]","      )","    ) {","      ContactsFeature()","    }","    ","    await store.send(.deleteButtonTapped(id: UUID(1))) {","    }","  }","}"],"highlights":[{"line":11},{"line":21},{"line":22},{"line":23}],"fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-views":{"role":"pseudoSymbol","title":"Integrate views","kind":"section","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-views","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-reducers":{"type":"section","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-reducers","kind":"section","role":"pseudoSymbol","title":"Integrate reducers","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestingTCA#Non-exhaustive-testing":{"url":"\/documentation\/composablearchitecture\/testingtca#Non-exhaustive-testing","kind":"section","abstract":[],"type":"topic","title":"Non-exhaustive testing","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestingTCA#Non-exhaustive-testing"},"02-03-02-code-0002.swift":{"syntax":"swift","identifier":"02-03-02-code-0002.swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlowNonExhaustive() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","    ","    await store.send(.addButtonTapped)","  }","}"],"highlights":[{"line":17},{"line":18}],"type":"file","fileName":"ContactsFeatureTests.swift","fileType":"swift"},"02-03-01-code-0006.swift":{"syntax":"swift","identifier":"02-03-01-code-0006.swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  @Dependency(\\.uuid) var uuid","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","        ","      case .destination:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(","          AlertState {","            TextState(\"Are you sure?\")","          } actions: {","            ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","              TextState(\"Delete\")","            }","          }","        )","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination) {","      Destination.body","    }","  }","}"],"highlights":[{"line":16}],"type":"file","fileName":"ContactsFeature.swift","fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures":{"estimatedTime":"30min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures","role":"project","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures","kind":"project","abstract":[{"text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent","type":"text"},{"text":" ","type":"text"},{"text":"feature that contains the ","type":"text"},{"code":"CounterFeature","type":"codeVoice"},{"text":" we have been building thus far.","type":"text"}],"type":"topic","title":"Composing features"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-network-requests":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","role":"pseudoSymbol","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-network-requests","title":"Testing network requests","kind":"section","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}]},"02-03-01-code-0008.swift":{"type":"file","syntax":"swift","identifier":"02-03-01-code-0008.swift","content":["import ComposableArchitecture","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    ","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          contact: Contact(id: ???, name: \"\")","        )","      )","    }","  }","}"],"fileType":"swift","fileName":"ContactsFeatureTests.swift","highlights":[{"line":12},{"line":13}]},"02-03-01-code-0007.swift":{"syntax":"swift","type":"file","fileName":"ContactsFeature.swift","identifier":"02-03-01-code-0007.swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  @Dependency(\\.uuid) var uuid","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: self.uuid(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","        ","      case .destination:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(","          AlertState {","            TextState(\"Are you sure?\")","          } actions: {","            ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","              TextState(\"Delete\")","            }","          }","        )","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination) {","      Destination.body","    }","  }","}"],"highlights":[{"line":23}],"fileType":"swift"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Navigation":{"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","type":"topic","role":"article","title":"Navigation","url":"\/tutorials\/meetcomposablearchitecture\/navigation","kind":"article"},"02-03-03-code-0005.swift":{"highlights":[{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30}],"fileName":"ContactsFeatureTests.swift","syntax":"swift","type":"file","identifier":"02-03-03-code-0005.swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func deleteContact() async {","    let store = TestStore(","      initialState: ContactsFeature.State(","        contacts: [","          Contact(id: UUID(0), name: \"Blob\"),","          Contact(id: UUID(1), name: \"Blob Jr.\"),","        ]","      )","    ) {","      ContactsFeature()","    }","    ","    await store.send(.deleteButtonTapped(id: UUID(1))) {","      $0.destination = .alert(","        AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: UUID(1))) {","            TextState(\"Delete\")","          }","        }","      )","    }","  }","}"],"fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Non-exhaustive-testing":{"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Non-exhaustive-testing","role":"pseudoSymbol","type":"section","title":"Non-exhaustive testing"},"02-03-01-code-0001.swift":{"syntax":"swift","type":"file","fileName":"ContactsFeatureTests.swift","identifier":"02-03-01-code-0001.swift","content":["import ComposableArchitecture","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    }","  }","}"],"highlights":[{"line":10},{"line":11},{"line":12}],"fileType":"swift"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture":{"title":"Meet the Composable Architecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a"},{"type":"text","text":" "},{"type":"text","text":"consistent and understandable way, with composition, testing, and ergonomics in mind. It can be"},{"type":"text","text":" "},{"type":"text","text":"used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","url":"\/tutorials\/meetcomposablearchitecture","kind":"overview","role":"overview","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations":{"type":"topic","kind":"project","role":"project","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations","abstract":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"text":"many","type":"text"}]},{"type":"text","text":" features."}],"estimatedTime":"30min","title":"Multiple presentation destinations","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Performing-a-network-request":{"kind":"section","type":"section","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Performing-a-network-request","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","title":"Performing a network request"},"02-03-01-code-0012.swift":{"syntax":"swift","fileName":"ContactsFeatureTests.swift","type":"file","identifier":"02-03-01-code-0012.swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    ","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          contact: Contact(id: UUID(0), name: \"\")","        )","      )","    }","    await store.send(\\.destination.addContact.setName, \"Blob Jr.\") {","      $0.destination?.modify(\\.addContact) { $0.contact.name = \"Blob Jr.\" }","    }","    await store.send(\\.destination.addContact.saveButtonTapped)","  }","}"],"highlights":[{"line":27}],"fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-into-the-app":{"role":"pseudoSymbol","kind":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-into-the-app","type":"section","title":"Integrating into the app","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestingTCA":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestingTCA","role":"article","title":"Testing","kind":"article","url":"\/documentation\/composablearchitecture\/testingtca","abstract":[{"text":"Learn how to write comprehensive and exhaustive tests for your features built in the Composable","type":"text"},{"text":" ","type":"text"},{"text":"Architecture.","type":"text"}],"type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-effects":{"type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","title":"Testing effects","kind":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-effects","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#What-is-a-side-effect":{"url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#What-is-a-side-effect","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","role":"pseudoSymbol","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"title":"What is a side effect?","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Deriving-child-stores":{"role":"pseudoSymbol","type":"section","kind":"section","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Deriving-child-stores","title":"Deriving child stores","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"type":"text","text":"feature that contains the "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" we have been building thus far."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Project-set-up":{"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Project-set-up","role":"pseudoSymbol","title":"Project set up","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","title":"Adding side effects","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects","estimatedTime":"30min","type":"topic","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}],"role":"project","kind":"project"}}}