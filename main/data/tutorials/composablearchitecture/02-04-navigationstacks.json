{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/composablearchitecture\/02-04-navigationstacks"]}],"metadata":{"categoryPathComponent":"MeetComposableArchitecture","role":"project","title":"Navigation stacks","category":"The Composable Architecture"},"sections":[{"content":[{"type":"paragraph","inlineContent":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}]}],"title":"Navigation stacks","estimatedTimeInMinutes":30,"kind":"hero","chapter":"Navigation"},{"tasks":[{"title":"Contact detail feature","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We are going to add a new “Contact Detail” feature that will allow us to drill down a layer"},{"type":"text","text":" "},{"type":"text","text":"from the contacts list at the root."}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"stepsSection":[{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new file called ContactDetailFeature.swift, import the Composable Architecture, and"},{"type":"text","text":" "},{"type":"text","text":"start a stub of a reducer by using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" macro."}]}],"caption":[],"code":"02-04-01-code-0000.swift","runtimePreview":null,"media":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Add a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","isActive":true,"type":"reference"},{"text":" struct to fulfill that requirement for the","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true,"type":"reference"},{"text":" protocol. The only state we currently need is the","type":"text"},{"text":" ","type":"text"},{"text":"contact, and it can be ","type":"text"},{"code":"let","type":"codeVoice"},{"text":" since we do not plan on mutating it from this screen.","type":"text"}]}],"caption":[],"code":"02-04-01-code-0001.swift","runtimePreview":null,"media":null},{"type":"step","content":[{"inlineContent":[{"text":"Add an ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action"},{"text":" enum to fulfill that requirement for the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"text":" protocol. There are not currently any actions that can","type":"text"},{"text":" ","type":"text"},{"text":"be performed in this feature, so we will leave it empty.","type":"text"}],"type":"paragraph"}],"caption":[],"code":"02-04-01-code-0002.swift","runtimePreview":null,"media":null},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Implement a basic "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t"},{"type":"text","text":" property to fulfill that"},{"type":"text","text":" "},{"type":"text","text":"requirement of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol. Since there are no actions in"},{"type":"text","text":" "},{"type":"text","text":"this feature there is nothing we can do in the reducer. More will be added to this later."}],"type":"paragraph"}],"caption":[],"code":"02-04-01-code-0003.swift","runtimePreview":null,"media":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Create a stub for a ","type":"text"},{"code":"ContactDetailView","type":"codeVoice"},{"text":".","type":"text"}]}],"caption":[],"code":"02-04-01-code-0004.swift","runtimePreview":null,"media":null},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"The view will hold onto a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"type":"text","text":" of the"},{"type":"text","text":" "},{"type":"codeVoice","code":"ContactDetailFeature"},{"type":"text","text":" domain, allowing it to observe the feature’s state changes and"},{"type":"text","text":" "},{"type":"text","text":"send actions."}],"type":"paragraph"}],"caption":[],"code":"02-04-01-code-0005.swift","runtimePreview":null,"media":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Stub out a basic form. There is no real information to show in this view now other than the","type":"text"},{"text":" ","type":"text"},{"text":"contact’s name, but more will be added later.","type":"text"}]}],"caption":[],"code":"02-04-01-code-0006.swift","runtimePreview":null,"media":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a preview so that we can see what the view looks like."}]}],"caption":[],"code":"02-04-01-code-0007.swift","runtimePreview":"ch02-sub04-sec01-image-0000.png","media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Nothing special so far, but we need a basic feature built so that we start pushing it onto"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack."}]}],"anchor":"Contact-detail-feature"},{"title":"Drill-down to contact detail","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Now that a new “Contact Detail” feature has been built we will make it possible to drill","type":"text"},{"text":" ","type":"text"},{"text":"down to it from the main list of contacts.","type":"text"}]}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"stepsSection":[{"caption":[{"type":"aside","style":"note","name":"Note","content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true},{"type":"text","text":" type is specifically made for the"},{"type":"text","text":" "},{"type":"text","text":"Composable Architecture, and makes it easy and ergonomic to integrate stack navigation"},{"type":"text","text":" "},{"type":"text","text":"into your applications."}],"type":"paragraph"}]}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go to ContactsFeature.swift and add a new field to the state. It will be of type"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true},{"type":"text","text":", generic of the feature that you want to be able to"},{"type":"text","text":" "},{"type":"text","text":"push onto the stack. This state represents the features that are currently"},{"type":"text","text":" "},{"type":"text","text":"pushed onto the stack."}]}],"code":"02-04-02-code-0000.swift","runtimePreview":null,"type":"step","media":null},{"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We will also handle the "},{"type":"codeVoice","code":".path"},{"type":"text","text":" case in the reducer and return"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none"},{"type":"text","text":" for now."}]},{"name":"Tip","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","isActive":true},{"type":"text","text":" is generic over both state and action of the "},{"type":"codeVoice","code":"Path"},{"type":"text","text":" domain, and so"},{"type":"text","text":" "},{"type":"text","text":"you can use the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackActionOf","isActive":true},{"type":"text","text":" type alias to simplify the syntax a bit."}]}],"style":"tip"}],"content":[{"type":"paragraph","inlineContent":[{"text":"Add a case to the action enum that holds onto ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"This represents the actions that can happen inside the stack, such as pushing or popping","type":"text"},{"text":" ","type":"text"},{"text":"an element off the stack, or an action happening inside a particular feature inside the","type":"text"},{"text":" ","type":"text"},{"text":"stack.","type":"text"}]}],"code":"02-04-02-code-0001.swift","runtimePreview":null,"type":"step","media":null},{"caption":[{"type":"aside","content":[{"inlineContent":[{"type":"text","text":"Scroll down to the bottom of the code snippet to see the application of the"},{"type":"text","text":" "},{"type":"codeVoice","code":"forEach"},{"type":"text","text":" operator."}],"type":"paragraph"}],"style":"tip","name":"Tip"}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"At the very end of the reducer use the"},{"type":"text","text":" "},{"type":"codeVoice","code":"ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:filePath:line:column:)-9svqb"},{"type":"text","text":" operator"},{"type":"text","text":" "},{"type":"text","text":"to integrate the "},{"type":"codeVoice","code":"ContactDetailFeature"},{"type":"text","text":" into the stack of the "},{"type":"codeVoice","code":"ContactsFeature"},{"type":"text","text":"."}]}],"code":"02-04-02-code-0002.swift","runtimePreview":null,"type":"step","media":null},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go to the "},{"code":"ContactsView","type":"codeVoice"},{"type":"text","text":" that holds the view for the contacts list. Swap out the"},{"type":"text","text":" "},{"code":"NavigationStack","type":"codeVoice"},{"type":"text","text":" for "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationStack\/init(path:root:destination:fileID:filePath:line:column:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is a special initializer that is specifically tuned for driving stacks from a"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"You hand it a binding to a store that is scoped down to"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction"},{"type":"text","text":", and it"},{"type":"text","text":" "},{"type":"text","text":"handles the rest."}]}],"code":"02-04-02-code-0003.swift","runtimePreview":null,"type":"step","media":null},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationStack\/init(path:root:destination:fileID:filePath:line:column:)"},{"text":" takes two trailing","type":"text"},{"text":" ","type":"text"},{"text":"closures. The first is for the root of the stack, which is our list of contacts. The second","type":"text"},{"text":" ","type":"text"},{"text":"is to describe the destinations that can be navigated to. It is handled a store that is","type":"text"},{"text":" ","type":"text"},{"text":"focused on the domain of just a single element in the stack.","type":"text"}]}],"code":"02-04-02-code-0004.swift","runtimePreview":null,"type":"step","media":null},{"caption":[{"type":"aside","name":"Warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It is necessary to use the"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationLink\/init(state:label:fileID:filePath:line:column:)","type":"reference","isActive":true},{"type":"text","text":" initializer on "},{"type":"codeVoice","code":"NavigationLink"},{"type":"text","text":" "},{"type":"text","text":"instead of the "},{"type":"codeVoice","code":"init(value:)"},{"type":"text","text":" initializer that comes with SwiftUI."}]}],"style":"warning"}],"content":[{"type":"paragraph","inlineContent":[{"text":"Wrap the row in the contacts list in a ","type":"text"},{"code":"NavigationLink","type":"codeVoice"},{"text":", using the special","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationLink\/init(state:label:fileID:filePath:line:column:)","isActive":true},{"text":" initializer that ships with this","type":"text"},{"text":" ","type":"text"},{"text":"library. We are also applying a ","type":"text"},{"code":".borderless","type":"codeVoice"},{"text":" button style so that we can have the delete","type":"text"},{"text":" ","type":"text"},{"text":"button in the row too.","type":"text"}]}],"code":"02-04-02-code-0005.swift","runtimePreview":null,"type":"step","media":null},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Navigation is performed using a "},{"type":"codeVoice","code":"NavigationLink"},{"type":"text","text":" and so the "},{"type":"codeVoice","code":"deleteButtonTapped"},{"type":"text","text":" action is"},{"type":"text","text":" "},{"type":"text","text":"no longer needed."}]}],"code":"02-04-02-code-0006.swift","runtimePreview":null,"type":"step","media":null},{"caption":[],"content":[{"inlineContent":[{"type":"text","text":"Run the application to see that we can now drill down one level, for each contact."}],"type":"paragraph"}],"code":null,"runtimePreview":null,"type":"step","media":"ch02-sub04-sec01-video-0000.mov"}],"anchor":"Drill-down-to-contact-detail"},{"title":"Deleting a contact","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We now have some drill-down functionality in our contacts app, but currently there is no"},{"type":"text","text":" "},{"type":"text","text":"interaction between the detail screen and the contacts list. Let’s change this by allowing"},{"type":"text","text":" "},{"type":"text","text":"you to delete a contact from the detail screen. We will first prompt the user with an alert"},{"type":"text","text":" "},{"type":"text","text":"asking them to confirm deletion, just as we did in "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","isActive":true},{"type":"text","text":"."}]}]}],"stepsSection":[{"caption":[],"runtimePreview":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"Go to ContactDetailFeature.swift to add more functionality to the reducer and view. We"},{"type":"text","text":" "},{"type":"text","text":"will start by adding some optional "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","isActive":true,"type":"reference"},{"type":"text","text":" to represent"},{"type":"text","text":" "},{"type":"text","text":"show the alert."}],"type":"paragraph"}],"media":null,"code":"02-04-03-code-0000.swift"},{"caption":[{"type":"aside","name":"Note","content":[{"inlineContent":[{"text":"The alert and delegate actions do not need an ID like was needed before. You will","type":"text"},{"text":" ","type":"text"},{"text":"see why soon.","type":"text"}],"type":"paragraph"}],"style":"note"}],"runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Add cases to ","type":"text"},{"code":"ContactDetailFeature.Action","type":"codeVoice"},{"text":" for all the things the user can do in the UI,","type":"text"},{"text":" ","type":"text"},{"text":"such as tapping the “Delete” button, as well as any actions inside the alert and the","type":"text"},{"text":" ","type":"text"},{"text":"delegate actions for when we need to tell the parent feature to delete the contact.","type":"text"}]}],"media":null,"code":"02-04-03-code-0001.swift"},{"caption":[],"runtimePreview":null,"type":"step","content":[{"inlineContent":[{"text":"Implement the new actions in the ","type":"text"},{"code":"body","type":"codeVoice"},{"text":" property. This is very similar to what we did in","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations"},{"text":". We will handle confirming of deletion by sending a","type":"text"},{"text":" ","type":"text"},{"text":"delegate action and dismissing using the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect"},{"text":"","type":"text"},{"text":" ","type":"text"},{"text":"dependency, and we have extracted the alert state to its own helper to make it easier to","type":"text"},{"text":" ","type":"text"},{"text":"test later.","type":"text"}],"type":"paragraph"}],"media":null,"code":"02-04-03-code-0002.swift"},{"caption":[],"runtimePreview":null,"type":"step","content":[{"inlineContent":[{"text":"Go to the ","type":"text"},{"type":"codeVoice","code":"ContactDetailView"},{"text":" struct and add a button for deleting the contact, as well as","type":"text"},{"text":" ","type":"text"},{"text":"use the ","type":"text"},{"type":"codeVoice","code":"alert(store:)"},{"text":" modifier to show an alert with the ","type":"text"},{"type":"codeVoice","code":"alert"},{"text":" state becomes non-","type":"text"},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"}],"type":"paragraph"}],"media":null,"code":"02-04-03-code-0003.swift"},{"caption":[],"runtimePreview":null,"type":"step","content":[{"inlineContent":[{"text":"Go to ContactsFeature.swift and destructure the ","type":"text"},{"code":".path","type":"codeVoice"},{"text":" action in order to inspect what","type":"text"},{"text":" ","type":"text"},{"text":"is happening in each element of the stack. In particular, we want to listen for when a","type":"text"},{"text":" ","type":"text"},{"code":".delegate(.confirmDeletion)","type":"codeVoice"},{"text":" action is sent, and in that case remove the contact from the","type":"text"},{"text":" ","type":"text"},{"text":"array.","type":"text"}],"type":"paragraph"}],"media":null,"code":"02-04-03-code-0004.swift"},{"caption":[],"runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Run the preview to see that the application works as expected. You can drill down to a","type":"text"},{"text":" ","type":"text"},{"text":"contact, tap the delete button, confirm deletion, and then the detail is popped off the","type":"text"},{"text":" ","type":"text"},{"text":"stack and the contact is removed from the list.","type":"text"}]}],"media":"ch02-sub04-sec03-video-0000.mp4","code":null}],"anchor":"Deleting-a-contact"}],"kind":"tasks"}],"kind":"project","hierarchy":{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","modules":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature"},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects"},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature"},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","kind":"task"}]}]}],"paths":[["doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation"]]},"identifier":{"url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Performing-a-network-request":{"kind":"section","type":"section","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Performing-a-network-request","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","title":"Performing a network request"},"02-04-02-code-0001.swift":{"fileType":"swift","identifier":"02-04-02-code-0001.swift","fileName":"ContactsFeature.swift","highlights":[{"line":15},{"line":47},{"line":48},{"line":49}],"type":"file","content":["import ComposableArchitecture","","@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","    var path = StackState<ContactDetailFeature.State>()","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    case path(StackActionOf<ContactDetailFeature>)","    @CasePathable","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  @Dependency(\\.uuid) var uuid","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: self.uuid(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","        ","      case .destination:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(.deleteConfirmation(id: id))","        return .none","        ","      case .path:","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination) {","      Destination.body","    }","  }","}"],"syntax":"swift"},"02-04-01-code-0004.swift":{"content":["import SwiftUI","","struct ContactDetailView: View {","  var body: some View {","  }","}"],"identifier":"02-04-01-code-0004.swift","fileType":"swift","fileName":"ContactDetailFeature.swift","syntax":"swift","type":"file","highlights":[]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-into-the-app":{"role":"pseudoSymbol","kind":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-into-the-app","type":"section","title":"Integrating into the app","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Contact-detail-feature":{"title":"Contact detail feature","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"type":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Contact-detail-feature","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","kind":"section","role":"pseudoSymbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DismissEffect":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DismissEffect","kind":"identifier"}],"title":"DismissEffect","kind":"symbol","abstract":[{"text":"An effect that dismisses the current presentation.","type":"text"}],"url":"\/documentation\/composablearchitecture\/dismisseffect","role":"symbol","navigatorTitle":[{"text":"DismissEffect","kind":"identifier"}]},"ch02-sub04-sec01-image-0000.png":{"type":"image","identifier":"ch02-sub04-sec01-image-0000.png","variants":[{"traits":["1x","light"],"url":"\/images\/ComposableArchitecture\/ch02-sub04-sec01-image-0000.png"}],"alt":null},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Managing-a-timer":{"abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}],"type":"section","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Managing-a-timer","title":"Managing a timer"},"02-04-01-code-0003.swift":{"fileType":"swift","content":["import ComposableArchitecture","","@Reducer","struct ContactDetailFeature {","  @ObservableState","  struct State: Equatable {","    let contact: Contact","  }","  enum Action {","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      }","    }","  }","}"],"fileName":"ContactDetailFeature.swift","syntax":"swift","highlights":[{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16}],"identifier":"02-04-01-code-0003.swift","type":"file"},"02-04-01-code-0001.swift":{"fileType":"swift","identifier":"02-04-01-code-0001.swift","fileName":"ContactDetailFeature.swift","highlights":[{"line":5},{"line":6},{"line":7},{"line":8}],"type":"file","content":["import ComposableArchitecture","","@Reducer","struct ContactDetailFeature {","  @ObservableState","  struct State: Equatable {","    let contact: Contact","  }","}"],"syntax":"swift"},"02-04-02-code-0003.swift":{"content":["import ComposableArchitecture","import SwiftUI","","struct ContactsView: View {","  @Bindable var store: StoreOf<ContactsFeature>","  ","  var body: some View {","    NavigationStack(path: $store.scope(state: \\.path, action: \\.path)) {","      List {","        ForEach(store.contacts) { contact in","          HStack {","            Text(contact.name)","            Spacer()","            Button {","              store.send(.deleteButtonTapped(id: contact.id))","            } label: {","              Image(systemName: \"trash\")","                .foregroundColor(.red)","            }","          }","        }","      }","      .navigationTitle(\"Contacts\")","      .toolbar {","        ToolbarItem {","          Button {","            store.send(.addButtonTapped)","          } label: {","            Image(systemName: \"plus\")","          }","        }","      }","    }","    .sheet(","      item: $store.scope(state: \\.destination?.addContact, action: \\.destination.addContact)","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert($store.scope(state: \\.destination?.alert, action: \\.destination.alert))","  }","}"],"identifier":"02-04-02-code-0003.swift","syntax":"swift","fileName":"ContactsFeature.swift","highlights":[{"line":8}],"fileType":"swift","type":"file"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/body-20w8t":{"kind":"symbol","title":"body","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t","required":true,"role":"symbol","url":"\/documentation\/composablearchitecture\/reducer\/body-20w8t","defaultImplementations":2,"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"body","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Body","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP4BodyQa"}],"abstract":[{"text":"The content and behavior of a reducer that is composed from other reducers.","type":"text"}],"type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Controlling-dependencies":{"role":"pseudoSymbol","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"kind":"section","title":"Controlling dependencies","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Controlling-dependencies"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Deriving-child-stores":{"role":"pseudoSymbol","type":"section","kind":"section","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Deriving-child-stores","title":"Deriving child stores","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"type":"text","text":"feature that contains the "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" we have been building thus far."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-effects":{"type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","title":"Testing effects","kind":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-effects","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation":{"estimatedTime":"30min","kind":"project","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation","title":"Your first presentation","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","type":"topic"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Navigation":{"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","type":"topic","role":"article","title":"Navigation","url":"\/tutorials\/meetcomposablearchitecture\/navigation","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"StackAction"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","role":"symbol","abstract":[{"text":"A wrapper type for actions that can be presented in a navigation stack.","type":"text"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"StackAction"}],"kind":"symbol","title":"StackAction","url":"\/documentation\/composablearchitecture\/stackaction"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Project-set-up":{"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Project-set-up","role":"pseudoSymbol","title":"Project set up","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature":{"url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature","estimatedTime":"20min","title":"Your first feature","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","role":"project","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"kind":"project","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-network-requests":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","role":"pseudoSymbol","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-network-requests","title":"Testing network requests","kind":"section","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}]},"02-04-03-code-0003.swift":{"content":["import ComposableArchitecture","import SwiftUI","","struct ContactDetailView: View {","  @Bindable var store: StoreOf<ContactDetailFeature>","  ","  var body: some View {","    Form {","      Button(\"Delete\") {","        store.send(.deleteButtonTapped)","      }","    }","    .navigationTitle(Text(store.contact.name))","    .alert($store.scope(state: \\.alert, action: \\.alert))","  }","}","","#Preview {","  NavigationStack {","    ContactDetailView(","      store: Store(","        initialState: ContactDetailFeature.State(","          contact: Contact(id: UUID(), name: \"Blob\")","        )","      ) {","        ContactDetailFeature()","      }","    )","  }","}"],"fileType":"swift","type":"file","syntax":"swift","identifier":"02-04-03-code-0003.swift","fileName":"ContactDetailFeature.swift","highlights":[{"line":5},{"line":9},{"line":10},{"line":11},{"line":14}]},"02-04-01-code-0002.swift":{"type":"file","fileName":"ContactDetailFeature.swift","highlights":[{"line":9},{"line":10}],"identifier":"02-04-01-code-0002.swift","content":["import ComposableArchitecture","","@Reducer","struct ContactDetailFeature {","  @ObservableState","  struct State: Equatable {","    let contact: Contact","  }","  enum Action {","  }","}"],"fileType":"swift","syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Composing-reducers":{"role":"pseudoSymbol","title":"Composing reducers","kind":"section","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"type":"text","text":"feature that contains the "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" we have been building thus far."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers","type":"section","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Composing-reducers"},"02-04-02-code-0006.swift":{"fileType":"swift","identifier":"02-04-02-code-0006.swift","fileName":"ContactsFeature.swift","highlights":[{"line":11},{"line":42},{"line":43},{"line":44}],"type":"file","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","    var path = StackState<ContactDetailFeature.State>()","  }","  enum Action {","    case addButtonTapped","    \/\/ case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    case path(StackActionOf<ContactDetailFeature>)","    @CasePathable","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  @Dependency(\\.uuid) var uuid","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: self.uuid(), name: \"\")","          )","        )","        return .none","","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","","      case .destination:","        return .none","","      \/\/  case let .deleteButtonTapped(id: id):","      \/\/    state.destination = .alert(.deleteConfirmation(id: id))","      \/\/    return .none","","      case .path:","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination) {","      Destination.body","    }","    .forEach(\\.path, action: \\.path) {","      ContactDetailFeature()","    }","  }","}",""],"syntax":"swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationState":{"abstract":[{"text":"A property wrapper for state that can be presented.","type":"text"}],"role":"symbol","title":"PresentationState","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PresentationState","kind":"identifier"}],"navigatorTitle":[{"text":"PresentationState","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/presentationstate"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Non-exhaustive-testing":{"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Non-exhaustive-testing","role":"pseudoSymbol","type":"section","title":"Non-exhaustive testing"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Improve-domain-modeling":{"role":"pseudoSymbol","kind":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Improve-domain-modeling","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","abstract":[{"text":"In the previous section you learned how to model your domains so that a parent feature can","type":"text"},{"text":" ","type":"text"},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"text":" ","type":"text"},{"text":"able to present ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"text":" features.","type":"text"}],"type":"section","title":"Improve domain modeling"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Drill-down-to-contact-detail":{"url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Drill-down-to-contact-detail","kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","title":"Drill-down to contact detail","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","title":"Adding side effects","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects","estimatedTime":"30min","type":"topic","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}],"role":"project","kind":"project"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"role":"symbol","type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"},{"text":"()","kind":"text"}],"abstract":[{"text":"Helps implement the conformance to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"text":" protocol for a type.","type":"text"}],"title":"Reducer()","url":"\/documentation\/composablearchitecture\/reducer()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/Action":{"fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"Action"}],"required":true,"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action","url":"\/documentation\/composablearchitecture\/reducer\/action","abstract":[{"text":"A type that holds all possible actions that cause the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","isActive":true,"type":"reference"},{"text":" of the reducer to change","type":"text"},{"text":" ","type":"text"},{"text":"and\/or kick off a side ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true,"type":"reference"},{"text":" that can communicate with the outside world.","type":"text"}],"role":"symbol","title":"Action","kind":"symbol"},"02-04-01-code-0005.swift":{"syntax":"swift","type":"file","fileName":"ContactDetailFeature.swift","content":["import ComposableArchitecture","import SwiftUI","","struct ContactDetailView: View {","  let store: StoreOf<ContactDetailFeature>","  ","  var body: some View {","  }","}"],"fileType":"swift","identifier":"02-04-01-code-0005.swift","highlights":[{"line":1},{"line":5},{"line":6}]},"02-04-01-code-0000.swift":{"content":["import ComposableArchitecture","","@Reducer","struct ContactDetailFeature {","}"],"identifier":"02-04-01-code-0000.swift","type":"file","fileName":"ContactDetailFeature.swift","syntax":"swift","fileType":"swift","highlights":[]},"02-04-02-code-0004.swift":{"type":"file","fileName":"ContactsFeature.swift","highlights":[{"line":33},{"line":34}],"identifier":"02-04-02-code-0004.swift","content":["import ComposableArchitecture","import SwiftUI","","struct ContactsView: View {","  @Bindable var store: StoreOf<ContactsFeature>","  ","  var body: some View {","    NavigationStack(path: $store.scope(state: \\.path, action: \\.path)) {","      List {","        ForEach(store.contacts) { contact in","          HStack {","            Text(contact.name)","            Spacer()","            Button {","              store.send(.deleteButtonTapped(id: contact.id))","            } label: {","              Image(systemName: \"trash\")","                .foregroundColor(.red)","            }","          }","        }","      }","      .navigationTitle(\"Contacts\")","      .toolbar {","        ToolbarItem {","          Button {","            store.send(.addButtonTapped)","          } label: {","            Image(systemName: \"plus\")","          }","        }","      }","    } destination: { store in","      ContactDetailView(store: store)","    }","    .sheet(","      item: $store.scope(state: \\.destination?.addContact, action: \\.destination.addContact)","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert($store.scope(state: \\.destination?.alert, action: \\.destination.alert))","  }","}"],"fileType":"swift","syntax":"swift"},"02-04-01-code-0006.swift":{"syntax":"swift","type":"file","fileName":"ContactDetailFeature.swift","content":["import ComposableArchitecture","import SwiftUI","","struct ContactDetailView: View {","  let store: StoreOf<ContactDetailFeature>","  ","  var body: some View {","    Form {","    }","    .navigationTitle(Text(store.contact.name))","  }","}"],"fileType":"swift","identifier":"02-04-01-code-0006.swift","highlights":[{"line":8},{"line":9},{"line":10}]},"ch02-sub04-sec03-video-0000.mp4":{"alt":null,"identifier":"ch02-sub04-sec03-video-0000.mp4","poster":null,"variants":[{"traits":["1x","light"],"url":"\/videos\/ComposableArchitecture\/ch02-sub04-sec03-video-0000.mp4"}],"type":"video"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Delete-contacts":{"abstract":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"text":"many","type":"text"}]},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Delete-contacts","role":"pseudoSymbol","type":"section","title":"Delete contacts","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks":{"kind":"project","type":"topic","estimatedTime":"30min","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"title":"Navigation stacks","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","role":"project","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation":{"type":"topic","title":"Testing presentation","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation","kind":"project","role":"project","estimatedTime":"40min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation"},"02-04-03-code-0004.swift":{"content":["import ComposableArchitecture","","@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","    var path = StackState<ContactDetailFeature.State>()","  }","  enum Action {","    case addButtonTapped","    case destination(PresentationAction<Destination.Action>)","    case path(StackActionOf<ContactDetailFeature>)","    @CasePathable","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  @Dependency(\\.uuid) var uuid","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: self.uuid(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","        ","      case .destination:","        return .none","","      case let .path(.element(id: id, action: .delegate(.confirmDeletion))):","        guard let detailState = state.path[id: id]","        else { return .none }","        state.contacts.remove(id: detailState.contact.id)","        return .none","        ","      case .path:","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination) {","      Destination.body","    }","    .forEach(\\.path, action: \\.path) {","      ContactDetailFeature()","    }","  }","}"],"fileType":"swift","type":"file","syntax":"swift","identifier":"02-04-03-code-0004.swift","fileName":"ContactsFeature.swift","highlights":[{"line":42},{"line":43},{"line":44},{"line":45},{"line":46}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"url":"\/documentation\/composablearchitecture\/store","type":"topic","abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"text":" ","type":"text"},{"text":"around to views that need to interact with the application.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}],"title":"Store","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"Store","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#What-is-a-side-effect":{"url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#What-is-a-side-effect","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","role":"pseudoSymbol","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"title":"What is a side effect?","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Adding-a-tab-view":{"type":"section","kind":"section","title":"Adding a tab view","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"type":"text","text":"feature that contains the "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" we have been building thus far."}],"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Adding-a-tab-view"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackState":{"type":"topic","navigatorTitle":[{"text":"StackState","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/stackstate","role":"symbol","abstract":[{"type":"text","text":"A list of data representing the content of a navigation stack."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StackState","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","title":"StackState"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-reducers":{"type":"section","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-reducers","kind":"section","role":"pseudoSymbol","title":"Integrate reducers","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI/NavigationStack/init(path:root:destination:fileID:filePath:line:column:)":{"url":"\/documentation\/composablearchitecture\/swiftui\/navigationstack\/init(path:root:destination:fileid:filepath:line:column:)","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Root"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"View"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"kind":"symbol","title":"init(path:root:destination:fileID:filePath:line:column:)","type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationStack\/init(path:root:destination:fileID:filePath:line:column:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"State"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Action"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Destination"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">("},{"kind":"externalParam","text":"path"},{"text":": ","kind":"text"},{"text":"Binding","kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI7BindingV"},{"text":"<","kind":"text"},{"text":"Store","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"text":"<","kind":"text"},{"text":"StackState","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10StackStateV"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"StackAction","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture11StackActionO"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">>>, ","kind":"text"},{"text":"root","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"destination","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Store","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"Destination","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"filePath","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":")","kind":"text"}],"abstract":[{"type":"text","text":"Drives a navigation stack with a store."}]},"02-04-03-code-0002.swift":{"highlights":[{"line":21},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":39},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51}],"syntax":"swift","content":["import ComposableArchitecture","","@Reducer","struct ContactDetailFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    let contact: Contact","  }","  enum Action {","    case alert(PresentationAction<Alert>)","    case delegate(Delegate)","    case deleteButtonTapped","    enum Alert {","      case confirmDeletion","    }","    enum Delegate {","      case confirmDeletion","    }","  }","  @Dependency(\\.dismiss) var dismiss","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert(.presented(.confirmDeletion)):","        return .run { send in","          await send(.delegate(.confirmDeletion))","          await self.dismiss()","        }","      case .alert:","        return .none","      case .delegate:","        return .none","      case .deleteButtonTapped:","        state.alert = .confirmDeletion","        return .none","      }","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}","","extension AlertState where Action == ContactDetailFeature.Action.Alert {","  static let confirmDeletion = Self {","    TextState(\"Are you sure?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmDeletion) {","      TextState(\"Delete\")","    }","  }","}"],"type":"file","fileType":"swift","identifier":"02-04-03-code-0002.swift","fileName":"ContactDetailFeature.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-add-contact-flow":{"url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-add-contact-flow","kind":"section","type":"section","title":"Testing the add contact flow","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"role":"pseudoSymbol"},"02-04-03-code-0000.swift":{"identifier":"02-04-03-code-0000.swift","fileName":"ContactDetailFeature.swift","type":"file","syntax":"swift","fileType":"swift","highlights":[{"line":7}],"content":["import ComposableArchitecture","","@Reducer","struct ContactDetailFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    let contact: Contact","  }","  enum Action {","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      }","    }","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Create-a-reducer":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"title":"Create a reducer","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Create-a-reducer","role":"pseudoSymbol","kind":"section","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-with-SwiftUI":{"kind":"section","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-with-SwiftUI","title":"Integrating with SwiftUI","type":"section","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-delete-contact-flow":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","type":"section","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-delete-contact-flow","title":"Testing the delete contact flow","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Deleting-a-contact":{"type":"section","role":"pseudoSymbol","title":"Deleting a contact","kind":"section","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Deleting-a-contact"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Essentials":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","kind":"article","type":"topic","url":"\/tutorials\/meetcomposablearchitecture\/essentials","abstract":[],"role":"article","title":"Essentials"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-views":{"role":"pseudoSymbol","title":"Integrate views","kind":"section","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-views","type":"section"},"02-04-02-code-0002.swift":{"syntax":"swift","type":"file","fileName":"ContactsFeature.swift","content":["import ComposableArchitecture","","@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","    var path = StackState<ContactDetailFeature.State>()","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    case path(StackActionOf<ContactDetailFeature>)","    @CasePathable","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  @Dependency(\\.uuid) var uuid","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: self.uuid(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","        ","      case .destination:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(.deleteConfirmation(id: id))","        return .none","        ","      case .path:","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination) {","      Destination.body","    }","    .forEach(\\.path, action: \\.path) {","      ContactDetailFeature()","    }","  }","}"],"fileType":"swift","identifier":"02-04-02-code-0002.swift","highlights":[{"line":55},{"line":56},{"line":57}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"url":"\/documentation\/composablearchitecture\/reducer","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"type":"text","text":"s should be executed later by the store, if any."}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"type":"topic","title":"Reducer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Child-to-parent-communication":{"kind":"section","type":"section","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"title":"Child-to-parent communication","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Child-to-parent-communication"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI/NavigationLink/init(state:label:fileID:filePath:line:column:)":{"kind":"symbol","type":"topic","conformance":{"constraints":[{"code":"Label","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"View","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Destination","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Never","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"P","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"L","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"state","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"label","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"L","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"filePath","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":")","kind":"text"}],"abstract":[{"type":"text","text":"Creates a navigation link that presents the view corresponding to an element of"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationLink\/init(state:label:fileID:filePath:line:column:)","role":"symbol","title":"init(state:label:fileID:filePath:line:column:)","url":"\/documentation\/composablearchitecture\/swiftui\/navigationlink\/init(state:label:fileid:filepath:line:column:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackActionOf":{"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StackActionOf","kind":"identifier"}],"title":"StackActionOf","type":"topic","url":"\/documentation\/composablearchitecture\/stackactionof","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackActionOf","role":"symbol","kind":"symbol","abstract":[{"text":"A convenience type alias for referring to a stack action of a given reducer’s domain.","type":"text"}],"navigatorTitle":[{"text":"StackActionOf","kind":"identifier"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-state-changes":{"type":"section","kind":"section","role":"pseudoSymbol","title":"Testing state changes","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-state-changes"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures":{"estimatedTime":"30min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures","role":"project","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures","kind":"project","abstract":[{"text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent","type":"text"},{"text":" ","type":"text"},{"text":"feature that contains the ","type":"text"},{"code":"CounterFeature","type":"codeVoice"},{"text":" we have been building thus far.","type":"text"}],"type":"topic","title":"Composing features"},"02-04-02-code-0005.swift":{"fileType":"swift","fileName":"ContactsFeature.swift","syntax":"swift","content":["struct ContactsView: View {","  @Bindable var store: StoreOf<ContactsFeature>","  ","  var body: some View {","    NavigationStack(path: $store.scope(state: \\.path, action: \\.path)) {","      List {","        ForEach(store.contacts) { contact in","          NavigationLink(state: ContactDetailFeature.State(contact: contact)) {","            HStack {","              Text(contact.name)","              Spacer()","              Image(systemName: \"trash\")","                .foregroundStyle(Color.red)","            }","          }","          .buttonStyle(.borderless)","        }","      }","      .navigationTitle(\"Contacts\")","      .toolbar {","        ToolbarItem {","          Button {","            store.send(.addButtonTapped)","          } label: {","            Image(systemName: \"plus\")","          }","        }","      }","    } destination: { store in","      ContactDetailView(store: store)","    }","    .sheet(","      item: $store.scope(state: \\.destination?.addContact, action: \\.destination.addContact)","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert($store.scope(state: \\.destination?.alert, action: \\.destination.alert))","  }","}"],"type":"file","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":13},{"line":16}],"identifier":"02-04-02-code-0005.swift"},"02-04-03-code-0001.swift":{"type":"file","fileName":"ContactDetailFeature.swift","content":["import ComposableArchitecture","","@Reducer","struct ContactDetailFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    let contact: Contact","  }","  enum Action {","    case alert(PresentationAction<Alert>)","    case delegate(Delegate)","    case deleteButtonTapped","    enum Alert {","      case confirmDeletion","    }","    enum Delegate {","      case confirmDeletion","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      }","    }","  }","}"],"highlights":[{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19}],"fileType":"swift","identifier":"02-04-03-code-0001.swift","syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations":{"type":"topic","kind":"project","role":"project","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations","abstract":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"text":"many","type":"text"}]},{"type":"text","text":" features."}],"estimatedTime":"30min","title":"Multiple presentation destinations","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations"},"02-04-02-code-0000.swift":{"content":["import ComposableArchitecture","","@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","    var path = StackState<ContactDetailFeature.State>()","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    @CasePathable","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  @Dependency(\\.uuid) var uuid","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: self.uuid(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","        ","      case .destination:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(.deleteConfirmation(id: id))","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination) {","      Destination.body","    }","  }","}"],"identifier":"02-04-02-code-0000.swift","syntax":"swift","fileName":"ContactsFeature.swift","highlights":[{"line":9}],"fileType":"swift","type":"file"},"ch02-sub04-sec01-video-0000.mov":{"alt":null,"identifier":"ch02-sub04-sec01-video-0000.mov","poster":null,"variants":[{"traits":["1x","light"],"url":"\/videos\/ComposableArchitecture\/ch02-sub04-sec01-video-0000.mov"}],"type":"video"},"02-04-01-code-0007.swift":{"highlights":[{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26}],"content":["import ComposableArchitecture","import SwiftUI","","struct ContactDetailView: View {","  let store: StoreOf<ContactDetailFeature>","  ","  var body: some View {","    Form {","    }","    .navigationTitle(Text(store.contact.name))","  }","}","","#Preview {","  NavigationStack {","    ContactDetailView(","      store: Store(","        initialState: ContactDetailFeature.State(","          contact: Contact(id: UUID(), name: \"Blob\")","        )","      ) {","        ContactDetailFeature()","      }","    )","  }","}"],"syntax":"swift","fileType":"swift","fileName":"ContactDetailFeature.swift","type":"file","identifier":"02-04-01-code-0007.swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/none":{"abstract":[{"type":"text","text":"An effect that does nothing and completes immediately. Useful for situations where you must"},{"type":"text","text":" "},{"type":"text","text":"return an effect, but you don’t need to do anything."}],"url":"\/documentation\/composablearchitecture\/effect\/none","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"none","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Effect","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none","kind":"symbol","type":"topic","title":"none","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/State":{"required":true,"role":"symbol","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"State","kind":"identifier"}],"abstract":[{"text":"A type that holds the current state of the reducer.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","title":"State","url":"\/documentation\/composablearchitecture\/reducer\/state","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"abstract":[],"kind":"symbol","url":"\/documentation\/composablearchitecture\/effect","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","role":"symbol","type":"topic","title":"Effect","navigatorTitle":[{"kind":"identifier","text":"Effect"}]},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture":{"title":"Meet the Composable Architecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a"},{"type":"text","text":" "},{"type":"text","text":"consistent and understandable way, with composition, testing, and ergonomics in mind. It can be"},{"type":"text","text":" "},{"type":"text","text":"used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","url":"\/tutorials\/meetcomposablearchitecture","kind":"overview","role":"overview","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature":{"estimatedTime":"1hr 0min","type":"topic","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature","role":"project","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"kind":"project","title":"Testing your feature","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature"}}}